{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Carpet\n",
    "\n",
    "`Carpet` is a sub-module used by `main` modular and contain three base class `CarpetIOScalar`, `CarpetIOHDF5`, and `CarpetIOASCII`. In `Carpet` we will deal with them separately, because their data structure is completely different. These class focused on the data file. Fetch all useful information from these files.\n",
    "\n",
    "In order to reduce the complexity of the code, These class does not depend on the `main` modular and can be used alone.\n",
    "\n",
    "We're going to get started by loading up necessary modular and specify some example file in my local computer to demonstrate the function of this module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-10T09:09:17.818192Z",
     "start_time": "2020-01-10T09:09:16.944121Z"
    }
   },
   "outputs": [],
   "source": [
    "path = '/Users/liuyu/simulations/BH/'\n",
    "HDF5_file = path + 'ml_admconstraints-ml_mom.xy.h5' # It also can be a list of HDF5 file\n",
    "Scalar_file = path + 'ml_admconstraints-ml_mom.maximum.asc' # It also can be a list of Scalar file\n",
    "ASCII_file = path + 'ml_admconstraints-ml_mom.x.asc' # It also can be a list of Scalar file\n",
    "from CactusTool.Carpet import CarpetIOScalar\n",
    "from CactusTool.Carpet import CarpetIOHDF5\n",
    "from CactusTool.Carpet import CarpetIOASCII"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CarpetIOScalar\n",
    "\n",
    "First view all available variables in a given reduction operation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-10T09:09:17.824858Z",
     "start_time": "2020-01-10T09:09:17.820964Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Available maximum timeseries:\n",
      "['M1', 'M2', 'M3']\n",
      "\n"
     ]
    }
   ],
   "source": [
    "ds_scalar = CarpetIOScalar(Scalar_file)\n",
    "print(ds_scalar)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-09T10:27:45.096430Z",
     "start_time": "2020-01-09T10:27:45.092868Z"
    }
   },
   "source": [
    "Then specify variables and their corresponding operations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-10T09:09:17.831227Z",
     "start_time": "2020-01-10T09:09:17.827860Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'M1': ['/Users/liuyu/simulations/BH/ml_admconstraints-ml_mom.maximum.asc']}\n"
     ]
    }
   ],
   "source": [
    "var = ds_scalar.max['M1']\n",
    "print(var.varfiles)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note: When specify variable name, we just simple filter it by use string `in` method in python.** So you can specify a vector or tensor like following."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-10T09:09:17.837517Z",
     "start_time": "2020-01-10T09:09:17.833321Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please make sure dict_keys(['M1', 'M2', 'M3']) belong the same group\n",
      "{'M1': ['/Users/liuyu/simulations/BH/ml_admconstraints-ml_mom.maximum.asc'], 'M2': ['/Users/liuyu/simulations/BH/ml_admconstraints-ml_mom.maximum.asc'], 'M3': ['/Users/liuyu/simulations/BH/ml_admconstraints-ml_mom.maximum.asc']}\n"
     ]
    }
   ],
   "source": [
    "var = ds_scalar.max['M']\n",
    "print(var.varfiles)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Following are some attribute of this variable you may need:**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These dataset may store in different files and one file may contain many variables. Pandas DataFrame is a powerful tool to combine them and remove duplicate data.\n",
    "\n",
    "`dataset` is a method, because sometime we need use different way to combine data. We use `pd.concat` to do it. Following are some example."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Whether add additional key index about filename"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-10T09:09:17.859239Z",
     "start_time": "2020-01-10T09:09:17.839469Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iteration</th>\n",
       "      <th>time</th>\n",
       "      <th>M1</th>\n",
       "      <th>M2</th>\n",
       "      <th>M3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.911620</td>\n",
       "      <td>23.938131</td>\n",
       "      <td>0.730308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>256.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.690899</td>\n",
       "      <td>6.131249</td>\n",
       "      <td>1.355362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>512.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.159930</td>\n",
       "      <td>8.806923</td>\n",
       "      <td>2.408183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>768.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16.974336</td>\n",
       "      <td>16.485445</td>\n",
       "      <td>2.944662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1024.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>19.698239</td>\n",
       "      <td>14.367274</td>\n",
       "      <td>4.194277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>65</td>\n",
       "      <td>16640.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>27.362242</td>\n",
       "      <td>14.835847</td>\n",
       "      <td>10.510170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>66</td>\n",
       "      <td>16896.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>34.752490</td>\n",
       "      <td>10.354096</td>\n",
       "      <td>8.157228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>67</td>\n",
       "      <td>17152.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>41.331741</td>\n",
       "      <td>9.649753</td>\n",
       "      <td>7.046484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>68</td>\n",
       "      <td>17408.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>56.774063</td>\n",
       "      <td>7.861392</td>\n",
       "      <td>8.128903</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>69</td>\n",
       "      <td>17664.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>86.641334</td>\n",
       "      <td>9.599766</td>\n",
       "      <td>10.149837</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>70 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    iteration  time         M1         M2         M3\n",
       "0         0.0   0.0   6.911620  23.938131   0.730308\n",
       "1       256.0   1.0   4.690899   6.131249   1.355362\n",
       "2       512.0   2.0   8.159930   8.806923   2.408183\n",
       "3       768.0   3.0  16.974336  16.485445   2.944662\n",
       "4      1024.0   4.0  19.698239  14.367274   4.194277\n",
       "..        ...   ...        ...        ...        ...\n",
       "65    16640.0  65.0  27.362242  14.835847  10.510170\n",
       "66    16896.0  66.0  34.752490  10.354096   8.157228\n",
       "67    17152.0  67.0  41.331741   9.649753   7.046484\n",
       "68    17408.0  68.0  56.774063   7.861392   8.128903\n",
       "69    17664.0  69.0  86.641334   9.599766  10.149837\n",
       "\n",
       "[70 rows x 5 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var.dataset(key=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-10T09:09:17.880151Z",
     "start_time": "2020-01-10T09:09:17.861104Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>iteration</th>\n",
       "      <th>time</th>\n",
       "      <th>M1</th>\n",
       "      <th>M2</th>\n",
       "      <th>M3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td rowspan=\"11\" valign=\"top\">ml_admconstraints-ml_mom.maximum.asc</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.911620</td>\n",
       "      <td>23.938131</td>\n",
       "      <td>0.730308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>256.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.690899</td>\n",
       "      <td>6.131249</td>\n",
       "      <td>1.355362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>512.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>8.159930</td>\n",
       "      <td>8.806923</td>\n",
       "      <td>2.408183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>768.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16.974336</td>\n",
       "      <td>16.485445</td>\n",
       "      <td>2.944662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1024.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>19.698239</td>\n",
       "      <td>14.367274</td>\n",
       "      <td>4.194277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>65</td>\n",
       "      <td>16640.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>27.362242</td>\n",
       "      <td>14.835847</td>\n",
       "      <td>10.510170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>66</td>\n",
       "      <td>16896.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>34.752490</td>\n",
       "      <td>10.354096</td>\n",
       "      <td>8.157228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>67</td>\n",
       "      <td>17152.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>41.331741</td>\n",
       "      <td>9.649753</td>\n",
       "      <td>7.046484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>68</td>\n",
       "      <td>17408.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>56.774063</td>\n",
       "      <td>7.861392</td>\n",
       "      <td>8.128903</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>69</td>\n",
       "      <td>17664.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>86.641334</td>\n",
       "      <td>9.599766</td>\n",
       "      <td>10.149837</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>70 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         iteration  time         M1  \\\n",
       "ml_admconstraints-ml_mom.maximum.asc 0         0.0   0.0   6.911620   \n",
       "                                     1       256.0   1.0   4.690899   \n",
       "                                     2       512.0   2.0   8.159930   \n",
       "                                     3       768.0   3.0  16.974336   \n",
       "                                     4      1024.0   4.0  19.698239   \n",
       "...                                            ...   ...        ...   \n",
       "                                     65    16640.0  65.0  27.362242   \n",
       "                                     66    16896.0  66.0  34.752490   \n",
       "                                     67    17152.0  67.0  41.331741   \n",
       "                                     68    17408.0  68.0  56.774063   \n",
       "                                     69    17664.0  69.0  86.641334   \n",
       "\n",
       "                                                M2         M3  \n",
       "ml_admconstraints-ml_mom.maximum.asc 0   23.938131   0.730308  \n",
       "                                     1    6.131249   1.355362  \n",
       "                                     2    8.806923   2.408183  \n",
       "                                     3   16.485445   2.944662  \n",
       "                                     4   14.367274   4.194277  \n",
       "...                                            ...        ...  \n",
       "                                     65  14.835847  10.510170  \n",
       "                                     66  10.354096   8.157228  \n",
       "                                     67   9.649753   7.046484  \n",
       "                                     68   7.861392   8.128903  \n",
       "                                     69   9.599766  10.149837  \n",
       "\n",
       "[70 rows x 5 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var.dataset()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For more `pd.concat` parameter you can see https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Preview\n",
    "\n",
    "It is best to run `var.dataset` and check the dataset by eye before executing the following command. We use `pandas.DataFrame.plot()` to do it. Following are some example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-10T09:09:18.859907Z",
     "start_time": "2020-01-10T09:09:17.881634Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYMAAAD2CAYAAAA0/OvUAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nOydeXxU1dn4v2e2zGSd7CuQsCMQUAMqKlBXjBZFrUpfq61V/LkUtVqlfWtra6u+LlVbW1uqtlgp2lbcRaBWXKq1LLIHBEOAhCRkXyazz/n9cWeSCSQhJJNZwvl+PvdzZ849997nzNz7POc8Z3mElBKFQqFQnNjoIi2AQqFQKCKPMgYKhUKhUMZAoVAoFMoYKBQKhQJlDBQKhUKBMgYKhUKhAAyRFmCgZGRkyMLCwkiLoVAoFDHDxo0b66WUmT0di1ljUFhYyIYNGyIthkKhUEQVHS4Ph5odHGq2U91ip6rZQXWznUMtdjbedMb+3s6LWWOgUCgUJxoer4/aNifVzXaqmu1Ut2hKP1j5N3W4u50jBGQlxZGbYunz2soYKBQKRRQgpaSpw+1X7kGK3r+vbrZT0+rAd8SiEclmA3lWC3lWC6eMsmqfUyzkppjJs1rISTFj1Gvdw+L23u+vjIFCoVCEAYfb260Wf6jF3vXd/9nh9nU7x6TXkWs1k5di4fQx6eRbLeSmWMizmrXPVguJcaFR48PKGLjdbiorK3E4HJEWJWYwm80UFBRgNBojLYpCEbN4fZLDbd1dNoFafXWLltZoc3U7RwjITIwjz2phYk4S50zIItdqId+q1ehzUyykJ5jQ6URYyjCsjEFlZSVJSUkUFhYiRHh+wFhGSklDQwOVlZUUFRVFWhyFIiqRUtJid2s++s5afJeP/lCzg5pWB94j/DdJcQH3jZniAiv5/s+5KRbyrRayk82YDNEzun9YGQOHw6EMwXEghCA9PZ26urpIi6JQRAyH20t1i6OzU/ZQs8M/CqfLd9/h8nY7x6gX5Pr98qcVpWk1eX+NPi9F+5xsjq3W9rAyBoAyBMeJ+r0UwxmvT1LX5gzyzwfX6rV9wxHuG4DMpDjyUsyMz05izvgs8gKK3l+7z0iIC5v7JlwMO2MQaWbNmsWnn35KRUUFn376Kd/85jdDdu2HHnqIH/3oR0fdS6E4EZFS0mr3dCn6oFE3gU7ZmhYHniPcNwkmfadin5KfQr7fdZNn9btvUuKIM+gjVKrIIWI1uE1JSYk8ctJZWVkZkyZNipBE3Vm3bh2PP/44b7/9dr/P8Xg8GAy92+fExETa29tDIV43oul3UygCONxealo0pV7dbQROVwet7Qj3jUEnyPEPqdRG3pg7a/OBTtlks+GEbRELITZKKUt6OqZaBiEmoLCXLFlCWVkZ06dP5/rrr2fx4sUsWbKEdevW4XQ6ue2227j55ptZt24d999/P6mpqezatYsvv/ySyy67jIMHD+JwOLjjjjtYtGgRS5YswW63M336dCZPnszy5cs77yWl5N5772XVqlUIIfjxj3/M1Vdfzbp163jggQfIyMhg+/btnHrqqbz00ksn7IugiB58Pkl9u7PbxKnuHbR26tuPdt9kJJrIs1oYnZnAWeMyOodaBoZfZibFoR9m7ptwMWyNwc/e2sHOQ60hveZJecn89OuT+5X3kUce6dYyWLp0KSkpKaxfvx6n08mZZ57JBRdcAMCmTZvYvn1754ieF154gbS0NOx2OzNmzOCKK67gkUce4ZlnnmHz5s1H3WvlypVs3ryZLVu2UF9fz4wZM5g9ezYAX3zxBTt27CAvL48zzzyTf//735x11lmh+DkUil5pdbg7a/PBHbFV/hE4NS0O3N7uXol4v/smN8XMSbnJXT76oMlTZuOJ574JF8PWGEQba9asYevWrfzjH/8AoKWlhT179mAymZg5c2a3oZ2//vWvee211wA4ePAge/bsIT09vddrf/LJJyxcuBC9Xk92djZz5sxh/fr1JCcnM3PmTAoKCgCYPn06FRUVyhgoBoXT46W2xdmp2Lv767V9m9PT7Ry9TpCTbCbPauaUkamdSj43xUJ+qjYCJ9ly4rpvooFhawz6W4MPF1JKfvOb33DhhRd2S1+3bh0JCQndvv/zn//ks88+Iz4+nrlz5w5qEl1cXFznZ71ej8fj6SO34kTH55PU25xBPvruE6gONdupa3MedV56golcq5lR6fGcMSa9m48+36rcN7HAMY2BEOIF4BLgsJRyij8tDXgFKAQqgKuklE1CM+tPA6VAB/BtKeUm/znXAz/2X/YXUspl/vRTgT8DFuBd4A4Zq73aQSQlJdHW1tb5/cILL+TZZ5/lnHPOwWg08uWXX5Kfn3/UeS0tLaSmphIfH8+uXbv4z3/+03nMaDTidruPmi189tln84c//IHrr7+exsZGPvroIx577DF27do1dAVUxCRtDneXu6bbTFn/5KkWBy5v9yURLEZ9p3KfMCGz030T6KDNTbFgMSn3TazTn5bBn4FngBeD0pYA70spHxFCLPF/vw+4CBjn304DngVO8xuPnwIlgAQ2CiHelFI2+fPcBHyOZgzmAasGX7TIUlxcjF6vZ9q0aXz729/mjjvuoKKiglNOOQUpJZmZmbz++utHnTdv3jx+//vfM2nSJCZMmMDpp5/eeWzRokUUFxdzyimnsHz58s70BQsW8NlnnzFt2jSEEDz66KPk5OQoY3CC4fL4qG3tedRNYKhlm+No9012krYkwrQRVi6aqq15kxfUKWuNNyr3zQlAv4aWCiEKgbeDWga7gblSymohRC6wTko5QQjxB//nFcH5ApuU8mZ/+h+Adf7tAynlRH/6wuB8fRHtQ0tjCfW7RT9SSurbXV0++qCJUwHf/eE2J0e+zqnxxqAx9H7Xjd9fn59qITMxDoM+epZEUAwtQzG0NFtKWe3/XANk+z/nAweD8lX60/pKr+whXaE4oWh3evwBSLomTlUFr3/T4sDl6e6+MRt15PkV/exxmd3G0wdG5cSbhm23oCLEDPpJkVJKIURYfPxCiEXAIoCRI0eG45YKxaBxewPumx6WLva7cVqPcN/oBGQnmztnyV4wOadziGVgS1XuG0UIGagxqBVC5Aa5iQ7706uAEUH5CvxpVWiuouD0df70gh7y94iUcimwFDQ30QBlVyhChpSSRpur25r0XR20msI/3HZ0QBKr331TkGphRmFaZ60+sEZ9dpJy3yjCy0CNwZvA9cAj/v0bQem3CyFeRutAbvEbjNXAQ0KIVH++C4AfSikbhRCtQojT0TqQrwN+M0CZAO3lVLWl/jMMBm4NKVo82eCAJN2XLj7UbMd5hPvGZNB1jrQ5a1xG15j6oAlUCSEKSKJQhIr+DC1dgVarzxBCVKKNCnoE+JsQ4rvAfuAqf/Z30YaV7kUbWvodAL/SfxBY78/3cyllo//zrXQNLV3FIEYSmc1mGhoaSE9PVwahHwTiGZjN5kiLEhGOjCcbWLr4kN9fX91ip7mXeLJ5Vgsn5SVz3qSsbuPp86xm0hJM6vlTxBzDaqE6Fens+Bmukc6klDR3uLsthXDkypa1bc6jA5KYDX6l3j0QSeB7dnJXPFmFItY4YRaqMxqNKmLXCYLd5e3y0Tc7gpZG6F882TPGZATNkg19PFmFItZQT74i6ugrnmzgc1MP7pve4skGVrUcjgFJFIpQoYyBIqz0FE82eGmE6pZe4smaDf4x9Wamj7Ae5caJtniyCkWsoYyBIqQ43N4jhld2H1vfWzzZnBTNfXNkPNnAqJykGIsnq1DEGsoYKPrNkfFkA77644knO3dCVjcf/XCNJ6tQxBrKGCiA3uPJBiv92taj48kmxhk6O2KPjCebZzWTk2I+IePJKhSxhjIGJwjB8WR76pSt7iuebIqFmUVpnfFk84PcOMnKfaNQDAuUMRgG+HySunZn5+ib6pb+x5PNTbEwJjOBs4PiyQaWRchIVO4bheJEQRmDGKDV4e5xPP2x4skG/PKT85L969P7V7VMUfFkFQpFd5QxiDDB8WQDa950W7q42UH7EfFkDTpBdrJWez9lZKp/eGXQipYqnqxCoThOlDEYQgLxZA81OzrXvzlyWYS+48kmMCtopmxA0at4sgqFItQoYzAI2hzu7ksXN3cPOXiseLITJ2R1C0gS6KBV7huFQhFulDHohcHGk50+wkquP55scKdsikUFJFEoFNFH1BgDIcQ84GlADzwnpXxkqO410HiyaQkmclPMjEyP5/TRaf4O2S5/vYonq1AoYpWoMAZCCD3wW+B8tDjI64UQb0opdw7keoF4ssE++uChltX9jCd75FLGFpNy3ygUiuFJVBgDYCawV0pZDuCPlHYp0KsxsDk9vP5FVY9LI/QVT7a4wMq8yeZO/3zAV68CkigUihOZaDEG+cDBoO+VaGEze6W83sadr2wGuseT1WbKWrqNwFHxZBUKhaJvosUY9AshxCJgEUBOQSH//P4c8qxm4k0xVQyFQqGIOqKlulwFjAj6XuBP64aUcqmUskRKWZKfnc7YrERlCBQKhSIEREUMZCGEAfgSOBfNCKwHviml3NHHOW3A7vBIOCRkAPWRFmKQxHoZYl1+iP0yxLr8EFtlGCWlzOzpQFRUq6WUHiHE7cBqtKGlL/RlCPzs7i2wcywghNgQy/JD7Jch1uWH2C9DrMsPw6MMECXGAEBK+S7wbqTlUCgUihORaOkzUCgUCkUEiWVjsDTSAgySWJcfYr8MsS4/xH4ZYl1+GB5liI4OZIVCoVBEllhuGSgUCoUiRChjoFAoFIroGU10vGRkZMjCwsJIi6FQKBQxw8aNG+ujep7BQCgsLGTDhg2RFkOhUChig/2fIgrP3N/bYeUmUigUihOBbX/v87AyBgqFQjHc8bph5xt9Zgmrm0gIMQF4JShpNPATwArcBNT503/kn5GsUCgUisGy70PoaOgzS1iNgZRyNzAdOqObVQGvAd8BnpRSPj6Y67vdbiorK3E4HIOWNZKYzWYKCgowGo2RFkWhUAwHtq+EuGSgtdcskexAPhf4Skq5P1QRxiorK0lKSqKwsDBmo5ZJKWloaKCyspKioqJIi6NQKGIdjxPK3oJJXwee7TVbJPsMrgFWBH2/XQixVQjxghAidSAXdDgcpKenx6whABBCkJ6eHvOtG4VCESXs/Sc4W2HK5X1mi4gxEEKYgPlAoHv7WWAMmgupGniil/MWCSE2CCE21NXV9ZQlpg1BgOFQBoVCESVsfxXi06FoTp/ZItUyuAjYJKWsBZBS1kopvVJKH/BHYGZPJwVHOsvM7HHeRMQRQnDttdd2fvd4PGRmZnLJJZcAsGvXLs444wzi4uJ4/PFBdZEoFApF37hssHsVnHQp6Pvug4xUn8FCglxEQohcKWW1/+sCYHtEpAoBCQkJbN++HbvdjsViYe3ateTn53ceT0tL49e//jWvv/56BKVUKBQnBF++B+4OmHLFMbOGvWUghEgAzgdWBiU/KoTYJoTYCnwNuCvccoWS0tJS3nnnHQBWrFjBwoULO49lZWUxY8YMNVJIoVAMPdtXQlIujDzjmFnDbgyklDYpZbqUsiUo7VtSyqlSymIp5fygVkJMcs011/Dyyy/jcDjYunUrp512WqRFUigUJxqOFtizBiYvAJ3+mNljdm2iY7JqCdRsC+01c6bCRY8cM1txcTEVFRWsWLGC0tLS0MqgUCgU/aHsbfC6YMqV/co+fI1BhJk/fz733HMP69ato6Gh75l/CoVCEXK2vwrWUZB/Sr+yD19j0I8a/FByww03YLVamTp1KuvWrYuoLAqF4gSj/TCUr4Mz74B+DlUPuzEQQlQAbYAX8EgpS4QQaWhrFhUCFcBVUsqmcMsWSgoKCli8ePFR6TU1NZSUlNDa2opOp+Opp55i586dJCcnR0BKhUIxLFnzY80ITFt47Lx+ItUy+JqUsj7o+xLgfSnlI0KIJf7v90VGtMHR3t5+VNrcuXOZO3cuADk5OVRWVoZZKoVCccKw613Y+grMuQ8yx/f7tGhZwvpSYJn/8zLgsgjKolAoFLFJRyO8fSdkT4Gz7zmuUyNhDCSwRgixUQixyJ+WHTSctAbI7unE/ixHoVAoFCcs7/0QbPVw2e/AYDquUyPhJjpLSlklhMgC1gohdgUflFJKIYTs6UQp5VJgKUBJSUmPeRQKheKEZPcq2PoyzL4Xcqcd9+mRmHRW5d8fRotlMBOoFULkgrY0BXB4ENcPhZgRZTiUQaFQhBF7E7x1J2RNhtk/GNAlwmoMhBAJQoikwGfgArR1iN4Ervdnux7oOz5bL5jNZhoaGmJamQbiGZjN5kiLolAoYgEptUm2troBuYcChNtNlA285l+i2QD8VUr5nhBiPfA3IcR3gf3AVQO5eEFBAZWVlcR6f0Ig0plCoVD0SeM+eOsOLazl7Hshb/qALxXusJflwFHOLCllA1rks0FhNBpVdDCFQjH88XrgP7+DDx4CnQEufgJOvWFQlxy+M5AVCoViOFK9Fd78HlRvhgkXQ+ljkJJ/7POOgTIGCoVCEQv4fPDpr+FfD2qRy656ESbN7/dyE8ci3B3II4QQHwghdgohdggh7vCnPyCEqBJCbPZvaqlPhUKhCNBaDX+5DP75U5h4Mdz6Hy16WQhD5Ia7ZeAB7pZSbvKPKtoohFjrP/aklFLFgVQoFIpgdr0Lb9wGHgfM/w2c/K2QGoEA4e5ArkYLeI+Usk0IUQYM3tmlUCgUsYiU0LBXC0+5Z402OsgQB/o4bS8EVG2EnGK48gXIGDdkokSsz0AIUQicDHwOnAncLoS4DtiA1nqI6VVLFQqFokd8XjjwGZS9BV+uhqZ9WnrWSTDqTC0gjdeltQQ8Tm2NoTn3asZhCBGRmKAlhEgEPgR+KaVcKYTIBurR1i16EMiVUh41Tsq/ltEigJEjR566f//+MEqtUCgUA8Tng4Ofw46VsPMNaK8FgxmKZsO4C2D8hWAdOeRiCCE2SilLejoWiXgGRuBVYLmUciWAlLI26Pgfgbd7OndI1iZy27UmmS5aFnBVKBTDhvo98MVLsPVv0HZIMwDjzofJl2sGwJQQaQk7CasxENrU4+eBMinlr4LSc4NWLV2AtkTF0OB1az648g+1SECV/4X0cfCt1yA5d8huq1AoThCcbbDjNc0IHPwchB7Gngfn/xwmzIO4pEhL2CPhbhmcCXwL2CaE2OxP+xGwUAgxHc1NVAHcHPI7+3zwwS/h89+Dqx0Q2sp+M27U/rQ/l8J1b4J1RMhvrVAohikeF9SVQfUWOLRZ29dsA68TMsZrBqD4akjKibSkxyTco4k+AXoaE/XukN7YbYeVi6DsTTjpMphyORSeDfFp2vEpV8JLV8CfSuH6NyBt9JCKo1AoYgxXB1RtgMNl0PAVNJZD41fQtB+kV8sTl6yN+pl5kzYHoGDGkAwBHSoi0oEcCkpKSuSGDRuOnbH9MKy4Bqo2wYUPwem39PwHHdoMf1mg9dhf92b/w8W57dBSCc0HtH1HgzY7MCkHErMgMUdbO6SuDGp3wmH/Zm/SmotxSdpDFJekDRsbP08bVRBDD5FCMexwtsPB/0DFv2H/p5pr2efWjpkStQpj+hhIGwPZkzUvQ2pR1Pc99tWBPLyNweFdsPwb0FEPVzynzdzri9qd8OKlgISzvg+meDBYwGgBvUkbAdC8H5oqtBpB835t2djjwZKmPTwJGeCyaf5FZxs4WqDloJYnZYR/hME8yJoEllSto0kZCAVoLk+3TautIkHoujbwfxb+7wJ0eu351ekjJK9Xi77V0aC5T7zuruGTCLBYtWfcbNUqRkL434lmsDdre51Ra8lb0rS8+hA7NbweOPQFlH8AX32g9SX6PFpFLu9kGDULRp2lKf3ErJh9F088Y9B8QOvA+egJMJph4cuQf0r/Lly/B/5yObQc6Pm4zgApBWAdBamjtOFgKSP9aSMgPkN76Ntroa1G23tdkDlBq/EnZvf+ILXVaBNPvlytPZBuW9cxvUl7EeLTtXulFkJakVYbsY7Q5JISkNpeerVWi8um7d0dmjJIH6fVaIyW3n8DKbWXt2GP9ns0lmty55+iNYNN8f37LftDR6M26cbn0Yxgcl7PSsvn1RSD9GodcsKv5BDaeOzgcnrdkJQNyfk9j8122bTp/a52bXSHIU77PQxxmlKwN2ottw7/PnBNr0urHXrd2n11Bq0mqDNoitfn8ecL5PV0V9Q6vZbeVqs9F4FnxNlG5/8W2AcUuN7o35u0c102TZ6BoDN0TWYKXFun95fDoP2uOp1/rz9iH5Tu82jj3wPj4D1O7VqGOK3yZIjTrmer08poqwPp65+MAQMWcL30hjnF/5t7td/b5+n6vXWG7uUyJ2v5A5vBov2G7o6ud6RpPzhbtHvnFsPor8HoOVAwE+ISB/Z7RyHD0xiMMMsNj14OBadCfommIL98TzMCleu1TCNnweVLj79T2OsBZ6v2oHgc/r1Tq80n54e+VtITboc2MaXloF8pNWr7jkbN2DXt83eEDwSh/SYZ4zUD4+7QXoiAomk5qLVUAugM2osGmkLIOkl7YaRPU5aBzdHa9RIGKzJTovZCxSVpn71uzdA07NUMZzA6g/YbB8Zc2+o1ZWJv7L9CCSYhS3s2zMmaEm471L1sQ4Xe1GWgpU9TbtKnpSVma1vAlWhOAUT32rz0+mvPfsPicWlBS0wJYEzQ9qZ4Lb/0Bd0n6DP+fUBhehxdk5m8Li09oER9Hv93r3bvbntf9++dit/cZVi87iAD4dC+J2R0L2t8unZO8LMhfV0tgMBzhNRaCRZr197rDjLQ/vcAGaT4/YYtIGugPF5XV8s7sHnsYIzXKgDGeO23TMqBojnalpA+9M9HhBiexmBsptxwx0hNoQSTUwyTF2hb2jCObSClpkibKjTl7fP6WxwBpaLveuBN8dpnj9Nf298L9V9C/W7tRTEmdOUxJWgvb8Z4rQ8jfaymmG11Wr/LoU2a/7R2h7+1Yu1qusclaXL53N0VmbMdXG3+fbumwNLHalvGOK21ojdq5Wg+0LUhNIWSkKnt49ODFKy3S/kZzH4ladHKotNrNe6WSmit1PaOVu2FT8rVWh/JeZq8wQrM7dDksKR230wJ3WvoOn9lIKB0gpVkQCnFqBtBMbwZnsYg4CbqaNSUVHMFFM2FjLGRFk2hUCiikqiagRxy4tNg3HmRlkKhUChimphtGQgh2oDdkZZjEGSgrccUy8R6GWJdfoj9MsS6/BBbZRglpczs6UAstwx299bciQWEEBtiWX6I/TLEuvwQ+2WIdflheJQBwhzpTKFQKBTRiTIGCoVCoYhpY7A00gIMkliXH2K/DLEuP8R+GWJdfhgeZYjdDmSFQqFQhI5YbhkoFAqFIkQoY6BQKBSK2B1ampGRIQsLCyMthkKhUMQMGzdurB928wwKCwvpVzwDhUKhiCBfNX/Fu/veZVHxIuL0PayiG0aEEPt7OxazxkChUCiinc2HN3Pb+7fR6mpldMpoLh59jJgqEUT1GSgUCsUQ8OHBD7lpzU1Y46xkxWfxdvnbkRapT8JqDIQQE4QQm4O2ViHEnUKIB4QQVUHppeGUS6FQKELJa3te444P7mCMdQwvXvQi88fM57NDn1Fvj94ljMLqJpJS7gamAwgh9EAV8BrwHeBJKeXjg7m+2+2msrISh8MxaFkjidlspqCgAKPRGGlRFArFcfLctud4etPTnJF7Bk9+7UkSjAlcMvoSntv2HO/te49rT7o20iL2SCT7DM4FvpJS7hchCgRSWVlJUlIShYWFhOqa4UZKSUNDA5WVlRQVDePgPArFMORfB/7F05ueprSolF+c+QuMeq1CN8Y6hklpk3ir/K2oNQaR7DO4BlgR9P12IcRWIcQLQojUgVzQ4XCQnp4es4YAQAhBenp6zLduFIoTDZfXxeMbHmdMyhh+edYvOw1BgK+P+To7G3ZS3lweIQn7JiLGQAhhAuYDf/cnPQuMQXMhVQNP9HLeIiHEBiHEhrq6ut6uHXqBw8xwKINCcaKxYtcKDrYd5AczfoBBd7TT5aKii9AJXdR2JEeqZXARsElKWQsgpayVUnqllD7gj8DMnk6SUi6VUpZIKUsyM3ucNxFxhBBce21XM9Dj8ZCZmckll1wCwPLlyykuLmbq1KnMmjWLLVu2REpUhUIRIhodjfxhyx84O/9szsw/s8c8GZYMzsg7g7fL38YnfWGW8NhEyhgsJMhFJITIDTq2ANgedolCREJCAtu3b8dutwOwdu1a8vPzO48XFRXx4Ycfsm3bNu6//34WLVoUKVEVCkWI+N3m39Hh6eCeknv6zHfJ6EuotlWzqXZTmCTrP2E3BkKIBOB8YGVQ8qNCiG1CiK3A14C7wi1XKCktLeWdd94BYMWKFSxcuLDz2KxZs0hN1bpETj/9dCorKyMio0KhCA17mvbw9y//ztUTrma0dXSfec8ZcQ4WgyUqXUVhNwZSSpuUMl1K2RKU9i0p5VQpZbGUcr6UsjrccoWSa665hpdffhmHw8HWrVs57bTTesz3/PPPc9FFF4VZOoVCESqklDy2/jESjYncMu2WY+aPN8Zz3sjzWFOxBqfXGQYJ+8+wXY7i//77f+xq3BXSa05Mm8h9M+87Zr7i4mIqKipYsWIFpaU9z5/74IMPeP755/nkk09CKqNCoQgfH1d9zGfVn3HfjPuwmq39OueSMZfwVvlbfHjwQy4ovGCIJew/w9YYRJr58+dzzz33sG7dOhoaGrod27p1KzfeeCOrVq0iPT09QhIqFIqB4PV52dW0iw01G1hetpzC5EKunnh1v88/Lec0Mi2ZvFX+ljIG4aA/Nfih5IYbbsBqtTJ16lTWrVvXmX7gwAEuv/xy/vKXvzB+/PjICahQKI6Lt8vfZvW+1Wys3Uibuw2AwuRCfjbrZxh1/V8tQK/TU1pUyvKy5TQ7mvvdohhqwm4MhBAVQBvgBTxSyhIhRBrwClAIVABXSSmbwi1bKCkoKGDx4sVHpf/85z+noaGBW2+9FQCDwaCW4lYoohgpJc9sfoalW5dSkFjABYUXMCNnBjNyZpAVnzWga148+mKW7VzG2gNr+cb4b4RY4oER9hjIfmNQIqWsD+LC93oAACAASURBVEp7FGiUUj4ihFgCpEop+6zal5SUyCOVaFlZGZMmTRoCqcPPcCqLQhGrSCl5dP2jvFT2EleMu4L7T78fvU4fkute+salpJvT+dO8P4VA0v4hhNgopSzp6Vi0LGF9KbDM/3kZcFkEZVEoFAq8Pi8PfPYAL5W9xLWTruWnZ/w0JIYAtMmppUWlbKzdSI2tJiTXHCyRMAYSWCOE2CiECMy4yg4aTloDZEdALoVCoQDA7XOz5OMlrNyzkpuLb+beGfeGfJmY0qJSJJL39r0X0usOlEgYg7OklKegLUlxmxBidvBBqfmtevRd9WdtIoVCoRgMUkr+9+P/5b2K97jr1Lu4/eTbh2S9sJHJI5maMZV3970b8msPhEhMOqvy7w+jxTKYCdQGlqTw7w/3cu4x1yYKdx/IUDAcyqBQxCr/2PMPVlWsYvHJi7lhyg1Deq/SolLKGsuiYiXTcEc6SxBCJAU+AxegrUP0JnC9P9v1wBsDub7ZbKahoSGmlWkgnoHZbI60KArFCUd5czmP/vdRTs89ne9O/e6Q3+/CwgvRCV1UtA7CPbQ0G3jN3+QyAH+VUr4nhFgP/E0I8V1gP3DVQC5eUFBAZWUlse5CCkQ6UygU4cPldXHvR/diMVh46KyH0ImhrytnxmcyI2cG7+57l9um3xbR5evDHfayHJjWQ3oDWuSzQWE0GlV0MIVCMSCe3Pgku5t288w5z5AZH74l8i8uupiffPoTttdvZ2rm1LDd90iiZWipQqFQRIyPKz/mpbKXWDhxIXNGzAnrvc8ddS5GnTHiriJlDBQKxQlNvb2eH//7x4y1juXukrvDfv9kUzKzC2bzXsV7eH3esN8/gDIGCoXihMXtdXPvR/dic9t4bPZjxOnjIiJHaVEp9fZ61teuj8j9IfyjiUYIIT4QQuwUQuwQQtzhT39ACFElhNjs33pe91mhUChChJSSB//zIOtr1vPArAcYmzo2YrLMLphNgjGBd8rfiZgM4W4ZeIC7pZQnAaejTTo7yX/sSSnldP8W+XFWCoViWPOnHX/itb2vcXPxzVwy+pKIymI2mJlXOI93yt+hrKEsIjKE1RhIKaullJv8n9uAMiC/77MUCoUitLy//32e2vgU8wrncdv02yItDgB3nHIHqXGp3PvRvXS4O8J+/4j1GQghCoGTgc/9SbcLIbYKIV4QQqT2ck7nchRV9VVhklShUAwndjTsYMnHS5iaOZUHz3wwomP7g0k1p/LI7EfY37qfhz5/KOz3j4gxEEIkAq8Cd0opW4FngTHAdKAaeKKn84KXo7Ab7Li97rDJrFAoYhspJVvqtrD4/cWkmdN4+mtPYzZE10z/GTkzuKn4Jt746o2w9x+E3RgIIYxohmC5lHIlgJSyVkrplVL6gD+irVfUJ06vk5fKXhpaYRUKRUwjpWR3426e3vQ0F628iGvfvRa7184z5z5DhiUj0uL1yC3TbuHkrJN58D8PcrD1YNjuG9bgNkJrjy1DC2RzZ1B6bmAJayHEXcBpUspr+rpW1oQsWfSTIt5a8Fa/ow19cfgLthzewvi08UxOn0xKXMrAC6NQKKIWn/TxTvk7PLftOcpbytELPafnns68onmcM/Ickk3JkRaxTw61H+LKt65kVNIoXrzoRYz6/ofV7Iu+gtuE2xicBXwMbAN8/uQfAQvRXEQSLezlzUHxDXqk+ORiafy+kQsKL+Dhsx/u874en4ffbf4dz217Dhm0OnZBYgGTMyZzeu7plBaVEm+MH2jRFApFlLC+Zj2Pb3icnQ07mZQ2iSvHX8l5o84jzZwWadGOi7X71/L9dd/nvJHnccv0WxifOviY6VFjDEJJSUmJvG7pdfxx2x9ZNm8Zp2Sf0mO+qvYq7vvoPrbUbWHB2AXcOv1W9rXsY2fDTnY07GBH/Q4O2Q6RYEzg66O/ztUTro7IeONWVysGYVAGSaEYIPta9vGrjb9i3cF15CTksPjkxVw8+uKwLDg3VPx+y+95ftvzOLwOSrJL+Oakb/K1EV/DoBvYsnLD1hh89NlHXPrGpVjjrLx88ctHhaRbU7GGBz59AB8+fnL6TygdffRctkCn0t92/43VFatx+VycknUK07KmEaePI04fh0ln0vZ6U1ea3oTZYCbNnEaGJYNkU3K/RyU4PA4qWivYWreVLXVb2Fq3lYrWCgw6A8UZxZyeezqn5Z7G1MypGHWhaR4qopPA+9efZ8fr8+L2uXH5XLi9btw+N0adEYvBQpw+LmQhGUFzszg8Dtw+Nx6fB6/04vV58UgPBmEgzhDX+S4MRDFJKfFID16fF73Qo9fpj1tp+6SPssYyPqr8iI8rP2Z7/XbijfHcOPVGrp10bdR1Dg+UFmcLK/es5JXdr1DVXkV2fDYnZ51MsimZ5Lhkkk3JpMSlMDJpJGOtY7GarUddo93VTnlLOdOypg1PY7Bhwwbeq3iPH3z4A3582o+5aPRFbKzZyH9r/sv6mvXsbtrNlPQpPDr7UUYkjzjmNZscTby+93VW7llJja0Gh9fRb3kMOgPp5nTSzGmYDeZuhkNKSaOjkXp7PQ2OBmxuW+d5aeY0ijOKmZo5FZvbxufVn7OzYScSicVgoSiliJz4HHIScshOyCYrPguB0JSC14Xb58bpddLh7qDD06Ht3R14pZdRyaMYbR3NWOtYCpMLu70cUkrcPnfni9gTHp+H/1T/h7X712J324k3xpNgTCDeGE+iMZEJaRMozijud2vG4/NwsO0g9fZ6DDoDBmHQ9joDbp+bFmcLLa4WWp2ttLpaiTfEU5BUQH5iPnmJeVgMFmxuG2UNZVqrrmEH5c3lZMVnMS51nLZZx1GUUoRJbzrq/oEy2z32TkWnF5oS0uv06IUet89Nu7sdm8um7d02LAYLGZYMMiwZpJpTe1VatbZattRt6Wbg08xpZMdnd/5/8YZ4qm3VHGo/RFV7FYfaD+HxechOyCY3IZechBxyE3LxSR+1HbXU2mqp6aih1lZ7zOfRqDNiNphJNCaSZErq3FsMFrzS26nYPT4Pbp9mTAJGJfAcBX4bp9fZr/8UQC/0Rxkzgeh8tvRC35nH7dWMmcvr6uayDb6WSW/CrDdjNpiJ08dhMVgw6U1dm86ETujYUreFens9AsHUjKmcXXA2V46/Mmo7hgeL1+flw8oP+ceX/+Bg20FanC20ulrxyu7rGWVYMhhrHUt+Yj41thr2Nu+ltqMWgO3f3j58jYGUkhvX3MgXh7/AK734pA+TzsT0rOnMLpjNNyd+c8CdLwHl4fQ6u20ur6vzxWm0N9LgaKDeXk+9vZ4mR1Pn8UBegDRLGunmdNIt6aSb08lPzKc4s5j8xPyjXqQWZwsbajbwec3nHGg7oCkEWw3t7vY+5Y03xHcqbCklVe1VnQ+KQJBqTsXt1crj8mlyWQwWpmZMZVrmNKZnTWda5jQOth3k7fK3WbVvFY2ORpJMSaSZ07C5bdjcNuwee+c99ULP+NTxnJx1MlMypqAXeq3m6lc0ra5WypvL2duyl4qWCty+gQ8HTo1LpdnZ3KlEchJyGGMdw+GOw+xr2YfH5+nMKxDodXoMwtCpvJ1e51EvzvGiF3rSzGlHtdgcXgeNjkYATDoTJ6WfxBjrGFqcLdR2aP9fvb0eiSTRmEh+Yj65ibnkJ+Zj0pmosdVQbaum2lZNnV2Lx5FpySQnwV8RiM8m0ZSISWfCqDNi0ps6jajT48TutWt7j512dzttrjba3e20u9qxe+zohb7T8AY2k05TrkadEaPeiElnwmKwYDFYMBu6lHFAqQd+S6/0as+3p+udOFKx+6SvW+2/8930K/PA/fQ6PT7p65bH5XXh8DpweBw4vA7sHjsur6tr8z9f41PHM7tgNmfmnUm6JX1Q/2usIqWkw9NBk6OJitYKvmr+ij1Ne9jbvJeq9ipyE3IZYx2jbSljOGfUOcPXGABUtFTwxMYnmJg2kZk5MynOLI7YglNDSburncP2wwhE50sceKHNBvNRNVa3183+1v181fIV5c3l1Nnrurm7THoTdR11bK7bzO7G3d0UpUlnYs6IOVw8+mLOzj+7W03bJ320OlvZ3rCdLw5/wReHv2Bb3bZea655CXmMsY5hrHUsY6xjyE7Ixufz4ZFaDdXr82LQGUiJS+ls8iaZkrC5bVS2VVLVXtVZi85OyGZy+mROSj+pWw0wUNY9zXs40HpAu67fteGVXiQSs97cqegsBgsGnUFTRNKLz6ftDToDicZEEk2JJBoTSTAm0OHpoN5eT11HXWfrLtjwgNYyHJ86nuKMYiamTeyxAhJQ3ImmxD7/58C1B+oXVih6Y9j2GQSMgWLwdLg72NGwgy11W0gzp3HeqPOOa/id2+fmYNtBdOgw6o1abdPvzx4uvluFItbpyxioqocCgHhjPDNyZjAjZ8aAzjfqjIxOGR1iqRQKRbiI2ZaBEKIN2B1pOQZBBlAfaSEGSayXIdblh9gvQ6zLD7FVhlFSyh5jesZyy2B3b82dWEAIsSGW5YfYL0Osyw+xX4ZYlx+GRxlARTpTKBQKBcoYKBQKhYLYNgZLIy3AIIl1+SH2yxDr8kPslyHW5YfhUYbY7UBWKBQKReiI5ZaBQqFQKEKEMgYKhUKhiN2hpRkZGbKwsDDSYigUCkXMsHHjxvphN8+gsLAQtRyFQqGIFqSU2L/YjO2zT0m95hoM6dG3eJ4QYn9vx2LWGCgUCkU04DpwgJY336LlzTdxHzgAQPuHHzFq2Z/RWSwRlq7/KGOgUCgUA8DnclF52+3YPv4YhCD+tNPIuOUWhMHAoXvvpeoHP6Dg6acR+tAFHRpKlDFQKBSKAdC8YgW2jz8m49ZbsH7jGxhzczuPeZsaqX3oYQ4/+ijZP/xhBKXsP2E1BkKIEcCLQDYggaVSyqeFEGnAK0AhUAFcJaVsOt7ru91uKisrcTj6H6Es2jCbzRQUFGA0qnCXCkW04m1vp/73fyBh1hlkLl581PG0667DVVlJ47IXMeYXkHbdtyIg5fER7paBB7hbSrlJCJEEbBRCrAW+DbwvpXxECLEEWALcd7wXr6ysJCkpicLCwn7HI44mpJQ0NDRQWVlJUVFRpMVRKBS90PjCC3ibmsi86/u95sm+7z7chw5R+/DDGPPzSDr33DBKePyEdZ6BlLJaSrnJ/7kNKAPygUuBZf5sy4DLBnJ9h8NBenp6TBoC0IKip6enx3TLRqEY7njq62n48zKS5s3DMnVKr/mEXk/+Y49hnjqVqrvvoeOLL8Io5fETsUlnQohC4GTgcyBbSlntP1SD5kYa6HUHLVskiXX5FYrhTv3vnkU6nWTecbR76Eh0Fgsjnv0dhuwsDv6/W3Du2RMGCQdGRIyBECIReBW4U0rZGnxMaosl9bhgkhBikRBigxBiQ11dXRgkPX6EEFx77bWd3z0eD5mZmVxyySUAvPHGGxQXFzN9+nRKSkr45JNPIiWqQqE4TlwHD9L0t79hvfJK4vrpyjWkpzPy+efRmUwcuPEm3FVVQyzlwAi7MRBCGNEMwXIp5Up/cq0QItd/PBc43NO5UsqlUsoSKWVJZmaPk+giTkJCAtu3b8dutwOwdu1a8vPzO4+fe+65bNmyhc2bN/PCCy9w4403RkpUhUJxnNQ9/WuEwUDGrbce13mmggJGPPccPrudA9+9EU9j4xBJOHDCagyE5gN5HiiTUv4q6NCbwPX+z9cDb4RTrlBTWlrKO++8A8CKFStYuHBh57HExMROV5DNZlNuIYUiRnCUldH69tukXXcdxuys4z7fPGE8I579He7qag7etAhvu20IpBw44W4ZnAl8CzhHCLHZv5UCjwDnCyH2AOf5v8cs11xzDS+//DIOh4OtW7dy2mmndTv+2muvMXHiRC6++GJeeOGFCEmpUCiOh8O/ehJdSgrpN353wNeIP/VU8p9+CseuXVR+73ak1xtCCQdHWIeWSik/AXqrCod03FXNQw/hLNsVyksSN2kiOT/60THzFRcXU1FRwYoVKygtLT3q+IIFC1iwYAEfffQR999/P//85z9DKqdCoQgtts//i+3jj8n6wT3ok5MHda2kuXPJ/dkDVP/4fhqef4GMRTeFSMrBoZawHiLmz5/PPffc081FdCSzZ8+mvLyc+vr6MEqmUCiOByklh594AkNODqn/8z8huWbKFVeQdMEF1P3mNzh2fxmSaw6WYbscRX9q8EPJDTfcgNVqZerUqaxbt64zfe/evYwZMwYhBJs2bcLpdJIehasbKhQKjbY1a3Fs3UruL3+BzmwOyTWFEOQ88FM6Nm7k0JIlFL3yMsJkCsm1B4pqGQwRBQUFLO5hmvqrr77KlClTmD59OrfddhuvvPKK6kRWKKIU6fFQ99RTmMaMIeXSS0N6bUNaGrk//xnOsjLqnn02pNcekDyRFmC40d7eflTa3LlzmTt3LgD33Xcf99133CttKBSKCNC8ciWuffso+O0zCEPo1WXSueeSctllNCz9I0lf+xqW4uKQ36O/qJaBQqFQ9IDPbqf+md9iOflkEs85Z8juk/2/P8KQlcWhJT/EF8GlaJQxUCgUih5o/MtLeA4fJuvu7w+pK1eflETeL3+Bq7ycw48+hrYIQ/hRxkChUCiOwNvcTMMf/0ji3LnEl5QM+f0SZs0i7frraPrrX6l9+GGkzzfk9zySYddnIKWM6Q7ZSNUKFApFF/XP/h5fezuZd90Vtntm+fsSG5e9iLe5mbxf/hIRxrgmw8oYmM1mGhoaYnYZ60A8A3OIhq8pFIrjp3X1GhqXLcN69dWYJ4wP232FTkfWkiXoU9Ooe+opvC0tFDz1VNjiKA8rY1BQUEBlZSXRuqJpfwhEOlMoFOHHsXMnh5YswTJ9Otk/Cn+4SiEEGf/vZvSpqdT87GccuOG7jHj2d+it1iG/97AyBkajUUUIUygUA8JTV8fB225Hn5JCwW9+jS4uLmKypF59FXqrlUP33EPFwm9S8NvfEjd6cLrNVdn30tmqA1mhUJzw+FwuKr+3GG9zMyN+91sMUbBEfvKFFzDi+efwNjdTcdVVtAWtZHA8SClpfvVV9s2f32c+ZQwUCsUJjZSSmvt/gn3zZvIefhjzSSdFWqROEmbOpOgff8c4cgSVt9xK/e//cFyDTDwNDVTe/j2q//fHmCdP7jOvMgYKheKERfp81D31NC1vvEHG924ned6FkRbpKIz5+RQuX07yxRdT99RTVN15F94eVjoIRkpJ2/vvU/71+dg++ois++5j5LI/93nOsOozCCdSStz79+Pcuxdn+T5c5eU495XjbW4m8ezZJF9cimX69Jgc1aRQnAh4221U/3AJbWv/ScqVVxx39LJworNYyHvsUcwnncThxx+n/eOPSZ43D+vlC7CcemqnnnHXHqb17bdoef11nHv2EjdxInl//hPm8cceFSVidVx7SUmJ3LBhQ9jv69yzh9ZVq2hd9R6uffs60w1ZWZhGj0ZnNmP79FOky4WxoIDk0lKSL76YuPHjlGFQKKIE14EDVN52G86vysm+715Sr7suZt5P+7btNL3yMm3vrsLX0YFp1CiSLpqHY8dObP/+N/h8WKZNI2XBAqyXL+i2GqoQYqOUssdZdMoY9APn3r20vrea1vdW4dr7Feh0xM+cSdIF52OZOhVTURH6xMTO/N62Ntr++T6t77yD7bPPwOvFNGYMyfPmkXzRPOLGjg2ZbD6XC3dlFaaiwph5mBWKSNL+739T9f27EUD+k78iYdasSIs0IHw2G61r1tLy6qt0bNiAIS+XlPnzSbn0UuJ6GVWpjMFxIqXEuWcPbe+tpnX1alxffQVCEF9SQtJF80g+//x+jzbw1NfTumYNbe+tpmP9epCSuHFjsX7jKlKv/R+E7vi6bXwuF46tW7H99790fP5f7Js3I51OzMXFZN19NwmnzRxIkRWKYY+7qoqG55+n6eVXiBs7loLfPoNpxIhIixUSvM3N6JKTj6lPlDHoJ9LjoXXVKhqefwHnrl1dBmDehSSdfz7GrOMPgh2M+/Bh2taupfXtd7B/8QUJZ51F3qP/hyEt7ZjnOnbvpmnFClrffAtfRwcIQdykiSTMmIkhJ4fGZcvw1NSQMPtssu6+G/OECYOSVaEYLjjLy2lY+kda3n4bhMB6+eVk3/sDdAkJkRYt7ChjcAx8DgfNK1fS+PwLuKuqtJr7NdeQfMEFQzLeWEpJ8yt/o/ahh9BbreQ/8TjxM2YcLZfLRdvq1TSteBn7pk2IuDiSL7qIpPPPI/7UU7vNSvQ5HDQt/yv1S5fia20lce5cdPHxSJcTn8OJdDrRJSeRUlpK4rnn9jmhJtA53rFxIx3rN2Dftg3zhAmkfec7WKZOCfnvoVAMBe7aWmoffoS21asRcXFYr/oG6TfcgDEnJ9KiRQxlDHrB09hI89/+TuNLL+Gtr8cybRrpNy8ice7c43bfDARHWRlVd96F6+BBMhcvJuXyBTi2bcO+ZSv2LVtwbNuGr6MD46iRpF6zEOuCy445Ld3b0kLDc8/Ruuo9hF6PiIvzbybclVV4amrQJSWRPG8eKQsuI27cOFz79uEsL8dVvg9n+VfYt2zBW6fFZdanpmKeOgX7xk34bDbiZ8wg7TvfIXHunLD8RgrFQOjYuJHKO+7E19FB2rXXknb9dRhUeFllDI7EvmMHTS8tp/Wdd5AuFwlnnkn6okXEz5wR9k5Yb3s7NT/5Ka3vvtuVaDBgnjABy7RiEs89l4QzzgiJ4pU+Hx2ff07L62/QunYtsqOjewaDAdOoUZgnTSK+pIT4GSWYRo9GCIG3vZ3mv/+Dxr+8iOdQNcZRI4krLEKYjAijtukSEkicM4eEWbN6XG1RSoljx05cFRXokxLRJSejT0lBn5yMPjUVodcPuoyKExspJU0rVlD70MOY8vMp+O0zIR2wEeuc8MbA29yMY9dunLt30bp6jeZysVhIuexS0v7nfyL+sEgpaVu9Gnd1DZZpxZhPOilkgbd7w2ez0bp2LZ66OuJGj8ZUNBrTiIJjLpkr3W5aV6+hZeWreFtakW535+ZtasJns6FPSyO5tJSU+V/HPHEitvXraX//X7T96194amp6vK4hK4vUa6/V1mRJSRmKIiuGOT6nk5qf/5yWV1eSMGc2+Y89hj45OdJiRRUnnDHwNDXRumoVto8+xrFrVzcFZBw1ktSFC7Fefrl6UEKMdLlo/+QTWt58i/Z//QvpcoHRCG43wmwm4awzSTrnXMxTJiM7OvC2teFtacXb0kz7++9j+/QzRHw81ssvJ+366/oc6eFtt+GuqsRzuI64cWNPaD/wiYrP6dRcnF99heurr2j7YB3OsjLS/9/NZH7ve6ql2QMxYQyEEPOApwE98JyU8pG+8h9pDHwOB+0ffKApoo8/Bo8HU2Eh5ilTME+aSNyEiZgnTsCQkTG0BVEA/rkWa9bg2L2bhNPPIGHWGcds7Th27aLxT3+m5d13wevFOKIAndmCzmJBWMzoTHF4GhtxHzyIt7m527nGESOInzGD+BkzsEwrRuh0Xa0WlwvQ+j/06enoEhLUnIwBIqVEulxIpxOfw4F0OpEOh/Y7ezza5vaAz9vZX6WzWNDFxSFMpqA8bqTbg/S4wSfB50V6fSB9Wrrb1XUflwtvUzOe2lo8h2tx1x7GU1ODu7oaAhHBdDpMo0aReeedJF94QWR/pCgm6o2BEEIPfAmcD1QC64GFUsqdvZ1z6skny3VPPolj61bsW7dh/+ILfDYbhqwski+5hJRL56vhlTGKu7aW5ldewbX/gKZw7HZ8Dgc+hx2DNRVjQQHGEQWYCgrQp6XjKNupjXrasAFvS8sxry9MJr9RiAeJplB8Pi1KnsGALiFB2+LjteGHUvqVkhPp1JSUzhyHLjEJXWKi1v+RmKT1f6Qko0tJQZ+Sgi4hQTvP1oGvowOfvQN8PvTWVPRpqRhSU9GnpSHi4jTl6FeuPqcTEOjiTF0DAEymHg1YQDn7Ojo6f6eAosXTXUFL/3e8Xr/CdWtpbjd4PPjsDny2drxtbfja2vG1t+Nt1/a+trbOz0QgJCOAMJsxZGdhzMrGkJ2NadQo4saMxjRmLKbCURFdcjpWiAVjcAbwgJTyQv/3HwJIKR/u7ZwpZov8e2Eh6HTEjRuHZfp0kuddSPzMmap5eIIifT6ce/biKNuJ0Om0jm2TCWE0In0+vE3NeBsb8TQ24G1oxGezgV6P0AkQOhAC6XZrittm69zQ6TTFbPIrZqMR6XDgtbV3Kk2fzTb0BdTrQafTjILOL6/TGVLlLIxGdEl+I5eYqH1OSkSf4P+cmIDOEo/OHIeIM2s1/ziTtuSBwYAwGBEGA0Kvw+d0IZ0OzUD5jRR6vfa/BPIZDVqZdDrQ6RF6HegNCJOxszUhTCbNuCYnqxbdIOnLGETLQnX5wMGg75XAaX2dYMjJZuSLy7BMnnxCTh5RHI3Q6TBPGB/WUIUBpNer1Z5bWjo3n82mKcv4BHTxFnTx8SB0eJub/EapEW9jE9Ll9CtWEzqzGWHSarjS5fS3FFyaMvV5NZeK9GkB031SO8cSr7li4i0Is8U/usugKVuDIUhJ67t/NwUUsn9vNqva9QlMtBiDfiGEWAQsAhg5ciQJM9XSC4roQOj16K3WfoYnVNH4FNFHtBiDKiB46EiBP60bUsqlwFIAIUSbEGJ3eMQbEjKA+kgLMUhivQyxLj/EfhliXX6IrTKM6u1AtBiD9cA4IUQRmhG4BvjmMc7Z3ZvvKxYQQmyIZfkh9ssQ6/JD7Jch1uWH4VEGiBJjIKX0CCFuB1ajDS19QUq5I8JiKRQKxQlDVBgDACnlu8C7x8yoUCgUipATyyuNLY20AIMk1uWH2C9DrMsPsV+GWJcfhkcZomOegUKhUCgiSyy3DBQKhUIRIqLaGAghoqZP43gRaqqkQqGIIaLSGAghDEKIx4EnhBDnRVqeAWIJfIhFwyCEuE4IMUcIkeL/HpXPSVuxeAAAB3RJREFUSl8IIa4QQkz3r30Vc/9DrMsPw+Y5ivky9Ieo6zPwP/C/BVLQRhd9G3gdbSVTZwRF6xdCiHOBnwF7gPellC9FWKR+4//tc4C/Aj5gL5AELJZS1gshhIy2B+YI/GUYCfwDaAUagN3AE1LK5mgvQ6zLD53KMgdYTow+RwBCiBzgZcBLjJbheIhGC5cETAf+n5RyOfA4MB74RkSl6gdCiDTgF8BTwIvAlUKI+/3HovG37kQIofc/3ElAlZTyXOBWtJmVMTFaQghh8pchD/ivvwz3o5XplxEVrh8IIZL98ucD62NNfgAhRJaU0kdsP0d5QogMtDJUxmIZBkLUKSgpZStQgdYiAPg38AUwy2+powohhC5I0ecB24DXpJQfAD8A7hJC5EopfdHYzBdC6IUQDwEPCSHmABPQakJIKb3AnWi//RwppYxGoxZUhmf8LbOZQJr/8FfAr4CzhBAz/WWIxv/hNuAjIcRJaMux5PoPxYr8eiHEz4F/CyHy0J4jIKaeI53/OfoPMAWtUgrEThkGQ7QW5jVgul+JtqMpWCddL0hUIIT4DtoKqw/6k9qBM9DWKkFKuQetqfxMRAQ8Bn7lvxFIRWsGPwi4ga8JIWYC+Gt5D/i3wPeowd+ntBWwAv8C/g+tTHOEENOllB4p5QFgGVrtjmhq3gcp9iTAAdwEvAqUCCFOjnb5AYQQZ6O5RZOAOVLKQ8Ba4OxYeY78fAuYCEyTUq4D3sFvhCFmyjBgotUYfILWJPs2gJRyIzCDoE7ZSCOESAQuRVM+FwkhJkgpK4BNaG6iAP8LFAghxkXbS4zmz31CSnmLlPKPwHa0JTV/AjwLne6t14E6IUSvi1xFkIPAbVLKW6WULwP7gUY0d90voTN40nqgQwiRGjFJeyCohpmN1ldmBS4Afgg8AtEtv59WIElKeZeU8pAQYryU0g48AfwGov858hvlccCvpZRNQouxYgSeQ3NVR30ZBktUGgMpZTXwBpqS/YYQohCt1uSJpFzB+Fssi6WUTwNr6God3Aqc+//bu7sQq6owjOP/xzLLQCLQi7KI7GZqGi0NIkow6MKMsKKLUqIICwLpxtBAr7ooKCzEQi3JO8GCSqWkILsooyBKKMgopIJI+hTzC8uni3cPnKbRZpzRs088Pxg458wH756z9nn3etfaazWNCeAgsJuKv20+AbYMzlahSnKX2t4EnCVpaXP1Mx340/a3XYrzhGzvsf2epCmSdlAlolXUznkDkhY3XfzJwGTbv3Uz3qEkTWj+xz9TbeVtYDFVqhiQdG+b4wewvRt4TdIWSeuBlyS9SQ18T5W0hNpTrs3tyMBU4A5JS6ne/DpgClWluK/50dYew1i1MhkA2N4FPAnMB3YAr9v+uLtR/VPTfYfqCVwmaYHtg9RsopVNGWklMECVkFrF9iHbR5sPG6htR39qHj8A9EnaDmymxm1aO72xGWt6w/YlwDZgDhX3QklbgBeAj6Bdx9BRariaWqhxB9VeNlMx39Pm+Ds8RsX9g+25VKl3DrCxeX0bNUutze1oLRXzVbZnUz3k76iLpgFgKz1wLpyq1k0tHUrSRCpxt6ZXMBxJDwOLbd/UPJ8PzKNmhqyw/f3Jfr+bmp6BqRrpUttfS7qCulrtB/ba/tf+Em0x3DS/Jok9R/V2bgE+bfl78DhVr54F7KfGbhbYPiLpdloeP9RUTNs/djx/C1ht+x1J84CvWt6OzqXKozNtX9u89hBVnl5Dnc972nwMY9HansEg28d6IBFMsL0e2CdpraQ11L4My20vavtJTI0dTKQ+/AeaD9JVwHHb77e98Q+TCC4HJgGHbR+2vbUH3oMJwDSq9DiXuhp9FKBH4mdIIphBrYr8R/O9nT3Qjo4AK6gS6V2S+qi9VY65vNv2YxiL1vcMeoWkyVQXvw94wvaaLoc0KpKuB3Y1Xy/b3tjlkEalGdy7mBo47gfWNYPiPUHSec2g62D5YZrtfV0Oa1SauC8EngWuBDa4difsKZJuBG4GbgNe7KV2NBZJBuNE0jJqcGm5e+BO6aEkTaem1q3uxfihbngC7qSSWa8ew9lt7wmfTDPLbhGwqVffg0GqGzH/+u+f/H9IMhgnHbNCIiJ6TpJBRES0fwA5IiJOvySDiIhIMoiIiCSDiIggySBiRCRdIOmR5vFFkl7tdkwR4ymziSJGoFkscbvt/i6HEnFa9OyG8xFn2FPADEmfUWv399nul3Q/sBA4n1oC+RngHOoGvqPArbZ/bZZneJ5aGfMQsMT2l2f+MCKGlzJRxMisAL6xPYtaobNTP3Xn83XUHgqHbF8DfAgMLn28gVoEcDawjFqFNKI10jOIGLudtg8AByTtp5Zrhtqhb6BZouEG4JWOVY8nnfkwI04sySBi7DrX4Dne8fw4dY5NAH5vehURrZQyUcTIHKD2+B21ZuOdvZLuhlrdU9LM8QwuYqySDCJGwPYvwAeSPgeePoU/sQh4UNJu4Atq/+yI1sjU0oiISM8gIiKSDCIigiSDiIggySAiIkgyiIgIkgwiIoIkg4iIIMkgIiKAvwGovpsFYGRNTQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "var.preview(subplots=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For more `pandas.DataFrame.plot()` parameter you can see https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.plot.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CarpetIOHDF5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-10T09:09:19.345539Z",
     "start_time": "2020-01-10T09:09:18.863552Z"
    }
   },
   "outputs": [],
   "source": [
    "ds = CarpetIOHDF5(HDF5_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-10T09:09:19.351880Z",
     "start_time": "2020-01-10T09:09:19.348517Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/Users/liuyu/simulations/BH/ml_admconstraints-ml_mom.xy.h5']"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds.files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-09T08:42:25.487607Z",
     "start_time": "2020-01-09T08:42:25.482993Z"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CarpetIOASCII"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-10T09:09:19.356972Z",
     "start_time": "2020-01-10T09:09:19.353750Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'M' in 'M[1]'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "position": {
    "height": "281px",
    "left": "735.4910278320312px",
    "right": "20px",
    "top": "147px",
    "width": "409px"
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
