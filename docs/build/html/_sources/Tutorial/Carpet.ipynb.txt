{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "# Carpet\n",
    "\n",
    "`Carpet` is a sub-module of `CactusTool`. This modular main processes output of Thorn `Carpet`. To reduce the potential bug, this part will be written as simple as possible. These class also not depend on the `CactusTool` modular and can be used alone.\n",
    "\n",
    "Thorn `Carpet` provides three different I/O methods, namely `CarpetIOScalar`, `CarpetIOHDF5`, and `CarpetIOASCII`. Where `CarpetIOScalar` is time series while `CarpetIOHDF5`, and `CarpetIOASCII` is gird function. `CarpetIOHDF5` can read the corresponding data according to the header. However, `CarpetIOASCII` will read all data at once. This is not an efficient way for extremely large data files. So we recommend 1-D grid function use `CarpetIOASCII` while 2-D or 3_D use `CarpetIOHDF5`.\n",
    "\n",
    "`Carpet` module main contain three base class `CarpetIOScalar`, `CarpetIOHDF5`, and `CarpetIOASCII`. We deal with them separately, because their data structure is completely different. These class only return part of the dataset, given time, refinement level and component. We don't recommend using all the data when drawing. Because the amount of simulation data is too large, this is no need and waste resources.\n",
    "\n",
    "We're going to get started by loading up necessary modular and specify some example file in my local computer to demonstrate the function of this module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-16T01:49:38.554197Z",
     "start_time": "2020-01-16T01:49:37.487919Z"
    },
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from CactusTool.Carpet import CarpetIOScalar\n",
    "from CactusTool.Carpet import CarpetIOHDF5\n",
    "from CactusTool.Carpet import CarpetIOASCII\n",
    "from CactusTool.funcs import filter_file\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-16T01:49:38.561724Z",
     "start_time": "2020-01-16T01:49:38.556351Z"
    },
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "path = '/Users/liuyu/simulations/BH/'\n",
    "files = [path + file for file in os.listdir(path)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "## CarpetIOScalar\n",
    "\n",
    "First view all available variables in a given reduction operation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-16T01:49:38.578215Z",
     "start_time": "2020-01-16T01:49:38.564479Z"
    },
    "deletable": false,
    "editable": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Available maximum timeseries:\n",
      "['H', 'M1', 'M2', 'M3', 'qlm_shape[0]', 'qlm_shape[1]', 'maxrss_mb', 'majflt_mb', 'arena_mb', 'ordblks_mb', 'hblks_mb', 'hblkhd_mb', 'uordblks_mb', 'fordblks_mb', 'keepcost_mb', 'swap_used_mb']\n",
      "Available none timeseries:\n",
      "['pt_loc_t[0]', 'pt_loc_t[1]', 'pt_loc_t[2]', 'pt_loc_t[3]', 'pt_loc_t[4]', 'pt_loc_t[5]', 'pt_loc_t[6]', 'pt_loc_t[7]', 'pt_loc_t[8]', 'pt_loc_t[9]', 'pt_loc_x[0]', 'pt_loc_x[1]', 'pt_loc_x[2]', 'pt_loc_x[3]', 'pt_loc_x[4]', 'pt_loc_x[5]', 'pt_loc_x[6]', 'pt_loc_x[7]', 'pt_loc_x[8]', 'pt_loc_x[9]', 'pt_loc_y[0]', 'pt_loc_y[1]', 'pt_loc_y[2]', 'pt_loc_y[3]', 'pt_loc_y[4]', 'pt_loc_y[5]', 'pt_loc_y[6]', 'pt_loc_y[7]', 'pt_loc_y[8]', 'pt_loc_y[9]', 'pt_loc_z[0]', 'pt_loc_z[1]', 'pt_loc_z[2]', 'pt_loc_z[3]', 'pt_loc_z[4]', 'pt_loc_z[5]', 'pt_loc_z[6]', 'pt_loc_z[7]', 'pt_loc_z[8]', 'pt_loc_z[9]', 'qlm_time[0]', 'qlm_time[1]', 'qlm_equatorial_circumference[0]', 'qlm_equatorial_circumference[1]', 'qlm_polar_circumference_0[0]', 'qlm_polar_circumference_0[1]', 'qlm_polar_circumference_pi_2[0]', 'qlm_polar_circumference_pi_2[1]', 'qlm_area[0]', 'qlm_area[1]', 'qlm_irreducible_mass[0]', 'qlm_irreducible_mass[1]', 'qlm_radius[0]', 'qlm_radius[1]', 'qlm_spin_guess[0]', 'qlm_spin_guess[1]', 'qlm_mass_guess[0]', 'qlm_mass_guess[1]', 'qlm_killing_eigenvalue_re[0]', 'qlm_killing_eigenvalue_re[1]', 'qlm_killing_eigenvalue_im[0]', 'qlm_killing_eigenvalue_im[1]', 'qlm_spin[0]', 'qlm_spin[1]', 'qlm_npspin[0]', 'qlm_npspin[1]', 'qlm_wsspin[0]', 'qlm_wsspin[1]', 'qlm_cvspin[0]', 'qlm_cvspin[1]', 'qlm_coordspinx[0]', 'qlm_coordspinx[1]', 'qlm_coordspiny[0]', 'qlm_coordspiny[1]', 'qlm_coordspinz[0]', 'qlm_coordspinz[1]', 'qlm_mass[0]', 'qlm_mass[1]', 'qlm_adm_energy[0]', 'qlm_adm_energy[1]', 'qlm_adm_momentum_x[0]', 'qlm_adm_momentum_x[1]', 'qlm_adm_momentum_y[0]', 'qlm_adm_momentum_y[1]', 'qlm_adm_momentum_z[0]', 'qlm_adm_momentum_z[1]', 'qlm_adm_angular_momentum_x[0]', 'qlm_adm_angular_momentum_x[1]', 'qlm_adm_angular_momentum_y[0]', 'qlm_adm_angular_momentum_y[1]', 'qlm_adm_angular_momentum_z[0]', 'qlm_adm_angular_momentum_z[1]', 'qlm_w_energy[0]', 'qlm_w_energy[1]', 'qlm_w_momentum_x[0]', 'qlm_w_momentum_x[1]', 'qlm_w_momentum_y[0]', 'qlm_w_momentum_y[1]', 'qlm_w_momentum_z[0]', 'qlm_w_momentum_z[1]', 'qlm_w_angular_momentum_x[0]', 'qlm_w_angular_momentum_x[1]', 'qlm_w_angular_momentum_y[0]', 'qlm_w_angular_momentum_y[1]', 'qlm_w_angular_momentum_z[0]', 'qlm_w_angular_momentum_z[1]']\n",
      "\n"
     ]
    }
   ],
   "source": [
    "ds_scalar = CarpetIOScalar(files)\n",
    "print(ds_scalar)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-09T10:27:45.096430Z",
     "start_time": "2020-01-09T10:27:45.092868Z"
    },
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "Then specify variables and their corresponding operations. **Note: When specify variable name, we just simple filter it by use string `in` method in python.** So you can specify a vector or tensor like following."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-16T01:49:38.622826Z",
     "start_time": "2020-01-16T01:49:38.581224Z"
    },
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "var_scalar = ds_scalar.max['M1'] # A scalar\n",
    "var_scalar = ds_scalar.max['M'] # A vector or tensor\n",
    "var_scalar = ds_scalar.max[''] # All variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "**Following are some attribute of this variable you may need:**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "### Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "These dataset may store in different files and one file may contain many variables. Pandas DataFrame is a powerful tool to combine them and remove duplicate data. We use `pd.concat` to the same variable and `pd.merge` to different variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-16T01:49:38.654813Z",
     "start_time": "2020-01-16T01:49:38.625923Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iteration</th>\n",
       "      <th>time</th>\n",
       "      <th>H</th>\n",
       "      <th>M1</th>\n",
       "      <th>M2</th>\n",
       "      <th>M3</th>\n",
       "      <th>qlm_shape[0]</th>\n",
       "      <th>qlm_shape[1]</th>\n",
       "      <th>maxrss_mb</th>\n",
       "      <th>majflt_mb</th>\n",
       "      <th>arena_mb</th>\n",
       "      <th>ordblks_mb</th>\n",
       "      <th>hblks_mb</th>\n",
       "      <th>hblkhd_mb</th>\n",
       "      <th>uordblks_mb</th>\n",
       "      <th>fordblks_mb</th>\n",
       "      <th>keepcost_mb</th>\n",
       "      <th>swap_used_mb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>390.581293</td>\n",
       "      <td>6.911620</td>\n",
       "      <td>23.938131</td>\n",
       "      <td>0.730308</td>\n",
       "      <td>-inf</td>\n",
       "      <td>-inf</td>\n",
       "      <td>322.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>282.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>251.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>256.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>42.265903</td>\n",
       "      <td>4.690899</td>\n",
       "      <td>6.131249</td>\n",
       "      <td>1.355362</td>\n",
       "      <td>-inf</td>\n",
       "      <td>-inf</td>\n",
       "      <td>327.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>282.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>253.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>512.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>65.653168</td>\n",
       "      <td>8.159930</td>\n",
       "      <td>8.806923</td>\n",
       "      <td>2.408183</td>\n",
       "      <td>-inf</td>\n",
       "      <td>-inf</td>\n",
       "      <td>328.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>282.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>256.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>768.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>60.606439</td>\n",
       "      <td>16.974336</td>\n",
       "      <td>16.485445</td>\n",
       "      <td>2.944662</td>\n",
       "      <td>-inf</td>\n",
       "      <td>0.459084</td>\n",
       "      <td>345.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>297.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>259.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1024.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>59.892898</td>\n",
       "      <td>19.698239</td>\n",
       "      <td>14.367274</td>\n",
       "      <td>4.194277</td>\n",
       "      <td>-inf</td>\n",
       "      <td>0.459084</td>\n",
       "      <td>351.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>301.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>266.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>65</td>\n",
       "      <td>16640.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>48.207639</td>\n",
       "      <td>27.362242</td>\n",
       "      <td>14.835847</td>\n",
       "      <td>10.510170</td>\n",
       "      <td>0.484935</td>\n",
       "      <td>0.484935</td>\n",
       "      <td>480.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>389.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>315.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>66</td>\n",
       "      <td>16896.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>28.754836</td>\n",
       "      <td>34.752490</td>\n",
       "      <td>10.354096</td>\n",
       "      <td>8.157228</td>\n",
       "      <td>0.484935</td>\n",
       "      <td>0.484935</td>\n",
       "      <td>480.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>389.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>315.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>67</td>\n",
       "      <td>17152.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>28.009021</td>\n",
       "      <td>41.331741</td>\n",
       "      <td>9.649753</td>\n",
       "      <td>7.046484</td>\n",
       "      <td>0.484935</td>\n",
       "      <td>0.484935</td>\n",
       "      <td>480.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>389.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>315.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>68</td>\n",
       "      <td>17408.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>43.712040</td>\n",
       "      <td>56.774063</td>\n",
       "      <td>7.861392</td>\n",
       "      <td>8.128903</td>\n",
       "      <td>0.484935</td>\n",
       "      <td>0.484935</td>\n",
       "      <td>480.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>389.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>315.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>69</td>\n",
       "      <td>17664.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>72.069296</td>\n",
       "      <td>86.641334</td>\n",
       "      <td>9.599766</td>\n",
       "      <td>10.149837</td>\n",
       "      <td>0.484935</td>\n",
       "      <td>0.484935</td>\n",
       "      <td>480.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>389.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>314.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>70 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    iteration  time           H         M1         M2         M3  \\\n",
       "0         0.0   0.0  390.581293   6.911620  23.938131   0.730308   \n",
       "1       256.0   1.0   42.265903   4.690899   6.131249   1.355362   \n",
       "2       512.0   2.0   65.653168   8.159930   8.806923   2.408183   \n",
       "3       768.0   3.0   60.606439  16.974336  16.485445   2.944662   \n",
       "4      1024.0   4.0   59.892898  19.698239  14.367274   4.194277   \n",
       "..        ...   ...         ...        ...        ...        ...   \n",
       "65    16640.0  65.0   48.207639  27.362242  14.835847  10.510170   \n",
       "66    16896.0  66.0   28.754836  34.752490  10.354096   8.157228   \n",
       "67    17152.0  67.0   28.009021  41.331741   9.649753   7.046484   \n",
       "68    17408.0  68.0   43.712040  56.774063   7.861392   8.128903   \n",
       "69    17664.0  69.0   72.069296  86.641334   9.599766  10.149837   \n",
       "\n",
       "    qlm_shape[0]  qlm_shape[1]  maxrss_mb  majflt_mb  arena_mb  ordblks_mb  \\\n",
       "0           -inf          -inf      322.0        0.0     282.0         0.0   \n",
       "1           -inf          -inf      327.0        0.0     282.0         0.0   \n",
       "2           -inf          -inf      328.0        0.0     282.0         0.0   \n",
       "3           -inf      0.459084      345.0        0.0     297.0         0.0   \n",
       "4           -inf      0.459084      351.0        0.0     301.0         0.0   \n",
       "..           ...           ...        ...        ...       ...         ...   \n",
       "65      0.484935      0.484935      480.0        0.0     389.0         0.0   \n",
       "66      0.484935      0.484935      480.0        0.0     389.0         0.0   \n",
       "67      0.484935      0.484935      480.0        0.0     389.0         0.0   \n",
       "68      0.484935      0.484935      480.0        0.0     389.0         0.0   \n",
       "69      0.484935      0.484935      480.0        0.0     389.0         0.0   \n",
       "\n",
       "    hblks_mb  hblkhd_mb  uordblks_mb  fordblks_mb  keepcost_mb  swap_used_mb  \n",
       "0        0.0        0.0        251.0         30.0          0.0           0.0  \n",
       "1        0.0        0.0        253.0         39.0         10.0           0.0  \n",
       "2        0.0        0.0        256.0         38.0         10.0           0.0  \n",
       "3        0.0        0.0        259.0         43.0          0.0           0.0  \n",
       "4        0.0        9.0        266.0         44.0          5.0           0.0  \n",
       "..       ...        ...          ...          ...          ...           ...  \n",
       "65       0.0       53.0        315.0         76.0         10.0           0.0  \n",
       "66       0.0       53.0        315.0         78.0         10.0           0.0  \n",
       "67       0.0       53.0        315.0         79.0         10.0           0.0  \n",
       "68       0.0       53.0        315.0         79.0         10.0           0.0  \n",
       "69       0.0       53.0        314.0         80.0         10.0           0.0  \n",
       "\n",
       "[70 rows x 18 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var_scalar.dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Header\n",
    "\n",
    "Not sure it's necessary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CarpetIOASCII\n",
    "\n",
    "Mostly the same as CarpetIOScalar"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-10T09:09:19.356972Z",
     "start_time": "2020-01-10T09:09:19.353750Z"
    }
   },
   "source": [
    "First view all available variables in a given dimensions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-16T01:49:39.001419Z",
     "start_time": "2020-01-16T01:49:38.656985Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Available grid function with x dimension:\n",
      "['H', 'gxx', 'gxy', 'gxz', 'gyy', 'gyz', 'gzz', 'M1', 'M2', 'M3']\n",
      "Available grid function with y dimension:\n",
      "['H', 'gxx', 'gxy', 'gxz', 'gyy', 'gyz', 'gzz', 'M1', 'M2', 'M3']\n",
      "Available grid function with z dimension:\n",
      "['H', 'gxx', 'gxy', 'gxz', 'gyy', 'gyz', 'gzz', 'M1', 'M2', 'M3']\n",
      "\n"
     ]
    }
   ],
   "source": [
    "ds_ascii = CarpetIOASCII(files)\n",
    "print(ds_ascii)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "Then specify variables and their corresponding dim.\n",
    "\n",
    "**Note: When specify variable name, we just simple filter it by use string `in` method in python.** So you can specify a vector or tensor like following. Not do `ds_ascii.x['']` like `CarpetIOScalar` when the sample is very huge specially in Laptop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-16T01:49:40.126765Z",
     "start_time": "2020-01-16T01:49:39.004053Z"
    }
   },
   "outputs": [],
   "source": [
    "var_ascii = ds_ascii.x['M'] "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "**Following are some attribute of this variable you may need:**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "### Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These dataset may store in different files and one file may contain many variables. Pandas DataFrame is a powerful tool to combine them and remove duplicate data.\n",
    "\n",
    "`dataset` is a method, because sometime we need use different way to combine data. We use `pd.concat` to do it. Following are some example. For more `pd.concat` parameter you can see https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-16T01:49:40.151950Z",
     "start_time": "2020-01-16T01:49:40.130944Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>it</th>\n",
       "      <th>tl</th>\n",
       "      <th>rl</th>\n",
       "      <th>c</th>\n",
       "      <th>ml</th>\n",
       "      <th>ix</th>\n",
       "      <th>iy</th>\n",
       "      <th>iz</th>\n",
       "      <th>time</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "      <th>M1</th>\n",
       "      <th>M2</th>\n",
       "      <th>M3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5888.0</td>\n",
       "      <td>768.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-230.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-5.432486e-17</td>\n",
       "      <td>-7.533550e-13</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>256.0</td>\n",
       "      <td>5888.0</td>\n",
       "      <td>768.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-220.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-5.432486e-17</td>\n",
       "      <td>-7.533550e-13</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>512.0</td>\n",
       "      <td>5888.0</td>\n",
       "      <td>768.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-210.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-5.432486e-17</td>\n",
       "      <td>-7.533550e-13</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>768.0</td>\n",
       "      <td>5888.0</td>\n",
       "      <td>768.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-200.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-5.432486e-17</td>\n",
       "      <td>-7.533550e-13</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1024.0</td>\n",
       "      <td>5888.0</td>\n",
       "      <td>768.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-190.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.353064e-17</td>\n",
       "      <td>-1.138351e-12</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>70240</td>\n",
       "      <td>17664.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6036.0</td>\n",
       "      <td>5888.0</td>\n",
       "      <td>768.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>5.78125</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.940048e-03</td>\n",
       "      <td>1.127827e-04</td>\n",
       "      <td>-5.259328e-20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>70241</td>\n",
       "      <td>17664.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6040.0</td>\n",
       "      <td>5888.0</td>\n",
       "      <td>768.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>5.93750</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.817419e-03</td>\n",
       "      <td>1.296465e-03</td>\n",
       "      <td>2.584893e-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>70242</td>\n",
       "      <td>17664.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6044.0</td>\n",
       "      <td>5888.0</td>\n",
       "      <td>768.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>6.09375</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.743194e-03</td>\n",
       "      <td>2.491388e-03</td>\n",
       "      <td>3.130308e-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>70243</td>\n",
       "      <td>17664.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6048.0</td>\n",
       "      <td>5888.0</td>\n",
       "      <td>768.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>6.25000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.663053e-03</td>\n",
       "      <td>3.619432e-03</td>\n",
       "      <td>2.339476e-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>70244</td>\n",
       "      <td>17664.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6052.0</td>\n",
       "      <td>5888.0</td>\n",
       "      <td>768.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>6.40625</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.529135e-03</td>\n",
       "      <td>4.600984e-03</td>\n",
       "      <td>1.525679e-19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>70245 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            it   tl   rl    c   ml      ix      iy     iz  time          x  \\\n",
       "0          0.0  0.0  0.0  5.0  0.0     0.0  5888.0  768.0   0.0 -230.00000   \n",
       "1          0.0  0.0  0.0  5.0  0.0   256.0  5888.0  768.0   0.0 -220.00000   \n",
       "2          0.0  0.0  0.0  5.0  0.0   512.0  5888.0  768.0   0.0 -210.00000   \n",
       "3          0.0  0.0  0.0  5.0  0.0   768.0  5888.0  768.0   0.0 -200.00000   \n",
       "4          0.0  0.0  0.0  5.0  0.0  1024.0  5888.0  768.0   0.0 -190.00000   \n",
       "...        ...  ...  ...  ...  ...     ...     ...    ...   ...        ...   \n",
       "70240  17664.0  0.0  6.0  4.0  0.0  6036.0  5888.0  768.0  69.0    5.78125   \n",
       "70241  17664.0  0.0  6.0  4.0  0.0  6040.0  5888.0  768.0  69.0    5.93750   \n",
       "70242  17664.0  0.0  6.0  4.0  0.0  6044.0  5888.0  768.0  69.0    6.09375   \n",
       "70243  17664.0  0.0  6.0  4.0  0.0  6048.0  5888.0  768.0  69.0    6.25000   \n",
       "70244  17664.0  0.0  6.0  4.0  0.0  6052.0  5888.0  768.0  69.0    6.40625   \n",
       "\n",
       "         y    z            M1            M2            M3  \n",
       "0      0.0  0.0 -5.432486e-17 -7.533550e-13  0.000000e+00  \n",
       "1      0.0  0.0 -5.432486e-17 -7.533550e-13  0.000000e+00  \n",
       "2      0.0  0.0 -5.432486e-17 -7.533550e-13  0.000000e+00  \n",
       "3      0.0  0.0 -5.432486e-17 -7.533550e-13  0.000000e+00  \n",
       "4      0.0  0.0  3.353064e-17 -1.138351e-12  0.000000e+00  \n",
       "...    ...  ...           ...           ...           ...  \n",
       "70240  0.0  0.0  3.940048e-03  1.127827e-04 -5.259328e-20  \n",
       "70241  0.0  0.0  4.817419e-03  1.296465e-03  2.584893e-19  \n",
       "70242  0.0  0.0  5.743194e-03  2.491388e-03  3.130308e-19  \n",
       "70243  0.0  0.0  6.663053e-03  3.619432e-03  2.339476e-19  \n",
       "70244  0.0  0.0  7.529135e-03  4.600984e-03  1.525679e-19  \n",
       "\n",
       "[70245 rows x 15 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var_ascii.dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CarpetIOHDF5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-16T01:49:40.310721Z",
     "start_time": "2020-01-16T01:49:40.154850Z"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'HDF5_file' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-9-f1d6014feca3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mds_hdf5\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCarpetIOHDF5\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mHDF5_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mds_hdf5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mds_hdf5\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvars\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'HDF5_file' is not defined"
     ]
    }
   ],
   "source": [
    "ds_hdf5 = CarpetIOHDF5(HDF5_file)\n",
    "print(ds_hdf5)\n",
    "print(ds_hdf5.xy.vars)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then specify variables and their corresponding dim.\n",
    "\n",
    "**Note: When specify variable name, we just simple filter it by use string `in` method in python.** So you can specify a vector or tensor like following."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-16T01:49:40.319224Z",
     "start_time": "2020-01-16T01:49:37.840Z"
    }
   },
   "outputs": [],
   "source": [
    "var_hdf5 = ds_hdf5.x['']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-16T01:49:40.320323Z",
     "start_time": "2020-01-16T01:49:37.854Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "file = '/Users/liuyu/simulations/BH/admbase-metric.4.x.asc'\n",
    "data = np.loadtxt(file, comments=\"#\")\n",
    "\n",
    "if data.size == 0:\n",
    "    print(\"OK\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-15T13:35:57.115587Z",
     "start_time": "2020-01-15T13:35:57.095589Z"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "nbTranslate": {
   "displayLangs": [
    "*"
   ],
   "hotkey": "alt-t",
   "langInMainMenu": true,
   "sourceLang": "en",
   "targetLang": "fr",
   "useGoogleTranslate": true
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "position": {
    "height": "281px",
    "left": "735.4910278320312px",
    "right": "20px",
    "top": "147px",
    "width": "409px"
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
