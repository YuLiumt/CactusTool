{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Carpet\n",
    "\n",
    "`Carpet` is a sub-module used by `main` modular and contain three base class `CarpetIOScalar`, `CarpetIOHDF5`, and `CarpetIOASCII`. In `Carpet` we will deal with them separately, because their data structure is completely different. These class focused on the data file. Fetch all useful information from these files.\n",
    "\n",
    "In order to reduce the complexity of the code, These class does not depend on the `main` modular and can be used alone.\n",
    "\n",
    "We're going to get started by loading up necessary modular and specify some example file in my local computer to demonstrate the function of this module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-09T10:06:42.634897Z",
     "start_time": "2020-01-09T10:06:41.600809Z"
    }
   },
   "outputs": [],
   "source": [
    "path = '/Users/liuyu/simulations/BH/'\n",
    "HDF5_file = path + 'ml_admconstraints-ml_ham.xy.h5' # It also can be a list of HDF5 file\n",
    "Scalar_file = path + 'ml_admconstraints-ml_ham.maximum.asc' # It also can be a list of Scalar file\n",
    "ASCII_file = path + 'ml_admconstraints-ml_ham.x.asc' # It also can be a list of Scalar file\n",
    "from CactusTool.Carpet import CarpetIOScalar\n",
    "from CactusTool.Carpet import CarpetIOHDF5\n",
    "from CactusTool.Carpet import CarpetIOASCII"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CarpetIOScalar\n",
    "\n",
    "The header in specified files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-09T10:07:51.528631Z",
     "start_time": "2020-01-09T10:07:51.525511Z"
    }
   },
   "outputs": [],
   "source": [
    "ds_scalar = CarpetIOScalar(Scalar_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-09T10:07:51.779515Z",
     "start_time": "2020-01-09T10:07:51.775002Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'H': ['/Users/liuyu/simulations/BH/ml_admconstraints-ml_ham.maximum.asc']}\n"
     ]
    }
   ],
   "source": [
    "print(ds_scalar.max.vars)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Following are some attribute of CarpetIOScalar you may need:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CarpetIOHDF5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-09T10:06:42.845061Z",
     "start_time": "2020-01-09T10:06:42.648489Z"
    }
   },
   "outputs": [],
   "source": [
    "ds = CarpetIOHDF5(HDF5_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-09T10:06:42.852180Z",
     "start_time": "2020-01-09T10:06:42.847448Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/Users/liuyu/simulations/BH/ml_admconstraints-ml_ham.xy.h5']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds.files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-01-09T08:42:25.487607Z",
     "start_time": "2020-01-09T08:42:25.482993Z"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CarpetIOASCII"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
