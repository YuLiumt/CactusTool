# License: NCSA Copyright: (c) 2020 The Board of Trustees of the University of Illinois

import numpy as np

def tCoal0PN(eta, total_mass, separation):
    """
    1PN merger time for circular orbits Blanchet, arXiv:1310.1528
    """
    return 5./256. * separation**4 / (eta*total_mass**2)

#Formulas for omega and Pt (3.5PN)
def m_omega_r35SPN(r, q, S1, S2, gamma):
    chi1x,chi1y,chi1z = S1
    chi2x,chi2y,chi2z = S2
    return (1 - ((3 + 5*q + 3*q**2)*gamma)/(2.*(1 + q)**2*r) + (gamma**1.5*(-4*chi1z - 3*q*chi1z - 3*q*chi2z - 4*q**2*chi2z))/(4.*(1 + q)**2*r**1.5) + 
        (3*gamma**2.5*(16*chi1z + 30*q*chi1z + 34*q**2*chi1z + 13*q**3*chi1z + 13*q*chi2z + 34*q**2*chi2z + 30*q**3*chi2z + 16*q**4*chi2z))/(16.*(1 + q)**4*r**2.5) + 
        (gamma**2*((24 + 103*q + 164*q**2 + 103*q**3 + 24*q**4)/(16.*(1 + q)**4) - (3*chi1x**2)/(2.*(1 + q)**2) + (3*chi1y**2)/(4.*(1 + q)**2) + (3*chi1z**2)/(4.*(1 + q)**2) - (3*q*chi1x*chi2x)/(1 + q)**2 - 
                (3*q**2*chi2x**2)/(2.*(1 + q)**2) + (3*q*chi1y*chi2y)/(2.*(1 + q)**2) + (3*q**2*chi2y**2)/(4.*(1 + q)**2) + (3*q*chi1z*chi2z)/(2.*(1 + q)**2) + (3*q**2*chi2z**2)/(4.*(1 + q)**2)))/r**2 + 
        (gamma**3*((167*np.pi**2*q)/(128.*(1 + q)**2) - (120 + 2744*q + 10049*q**2 + 14820*q**3 + 10049*q**4 + 2744*q**5 + 120*q**6)/(96.*(1 + q)**6) + ((76 + 180*q + 155*q**2)*chi1x**2)/(16.*(1 + q)**4) - 
                ((43 + 85*q + 55*q**2)*chi1y**2)/(8.*(1 + q)**4) - ((28 + 124*q + 135*q**2)*chi1z**2)/(32.*(1 + q)**4) + (q*(120 + 187*q + 120*q**2)*chi1x*chi2x)/(8.*(1 + q)**4) + 
                (q**2*(155 + 180*q + 76*q**2)*chi2x**2)/(16.*(1 + q)**4) - (q*(54 + 95*q + 54*q**2)*chi1y*chi2y)/(4.*(1 + q)**4) - (q**2*(55 + 85*q + 43*q**2)*chi2y**2)/(8.*(1 + q)**4) - 
                (q*(96 + 127*q + 96*q**2)*chi1z*chi2z)/(16.*(1 + q)**4) - (q**2*(135 + 124*q + 28*q**2)*chi2z**2)/(32.*(1 + q)**4)))/r**3 + 
        (gamma**3.5*((-3*(4 + q)*chi1z**3)/(8.*(1 + q)**4) - (q*(135 + 385*q + 363*q**2 + 377*q**3 + 387*q**4 + 168*q**5)*chi2z)/(32.*(1 + q)**6) - (9*q*chi1z**2*chi2z)/(4.*(1 + q)**3) + 
                (3*q**3*(1 + 4*q)*chi2x**2*chi2z)/(2.*(1 + q)**4) - (3*q**3*(1 + 4*q)*chi2y**2*chi2z)/(8.*(1 + q)**4) - (3*q**3*(1 + 4*q)*chi2z**3)/(8.*(1 + q)**4) + 
                chi1y**2*((-3*(4 + q)*chi1z)/(8.*(1 + q)**4) - (9*q*(1 + 2*q)*chi2z)/(4.*(1 + q)**4)) + chi1x**2*((3*(4 + q)*chi1z)/(2.*(1 + q)**4) + (9*q*(2 + 3*q)*chi2z)/(4.*(1 + q)**4)) + 
                chi1x*((9*q*(2 + q)*chi1z*chi2x)/(4.*(1 + q)**4) + (9*q**2*(1 + 2*q)*chi2x*chi2z)/(4.*(1 + q)**4)) + chi1y*((9*q**2*chi1z*chi2y)/(4.*(1 + q)**4) + (9*q**2*chi2y*chi2z)/(4.*(1 + q)**4)) + 
                chi1z*(-(168 + 387*q + 377*q**2 + 363*q**3 + 385*q**4 + 135*q**5)/(32.*(1 + q)**6) + (9*q**2*(3 + 2*q)*chi2x**2)/(4.*(1 + q)**4) - (9*q**2*(2 + q)*chi2y**2)/(4.*(1 + q)**4) - 
                (9*q**2*chi2z**2)/(4.*(1 + q)**3))))/r**3.5)/r**1.5

#first ansatz to fit to
def make_ansatz1(eta, s1z, s2z, MAXtime):
    def ansatz1(t, a, t_0):
        theta = (eta*np.abs((MAXtime+1)*t_0 - t)/5.)**(-1/8.)

        b_0 = 0.27641369047619047 + (11*eta)/32.
        c_0 = (-19*eta*(s1z + s2z))/80. + (-96*np.pi - 113*((-1 + np.sqrt(1 - 4*eta))*s1z - (1 + np.sqrt(1 - 4*eta))*s2z))/320.
        d_0 = (371*eta**2)/2048. + (eta*(56975 + 61236*s1z**2 - 119448*s1z*s2z + 61236*s2z**2))/258048. + (1855099 + 1714608*(-1 + np.sqrt(1 - 4*eta))*s1z**2 - 1714608*(1 + np.sqrt(1 - 4*eta))*s2z**2)/1.4450688e7
        e_0 = (-17*eta**2*(s1z + s2z))/128. + (eta*(117*np.pi - 2*((1213 + 63*np.sqrt(1 - 4*eta))*s1z \
        + (1213 - 63*np.sqrt(1 - 4*eta))*s2z)))/2304. + (-46374*np.pi - 146597*((-1 + np.sqrt(1 - 4*eta))*s1z - (1 + np.sqrt(1 - 4*eta))*s2z))/129024.
        f_0 = -2.499258364444952 + (235925*eta**3)/1.769472e6 + (107*np.euler_gamma)/280. + (53*np.pi**2)/200. - (6127*np.pi*s1z)/12800. + \
        (6127*np.sqrt(1 - 4*eta)*np.pi*s1z)/12800. - (16928263*s1z**2)/1.376256e8 + \
        (16928263*np.sqrt(1 - 4*eta)*s1z**2)/1.376256e8 - (6127*np.pi*s2z)/12800. - (6127*np.sqrt(1 - 4*eta)*np.pi*s2z)/12800. - \
        (16928263*s2z**2)/1.376256e8 - (16928263*np.sqrt(1 - 4*eta)*s2z**2)/1.376256e8 + \
        (eta**2*(-2318475 + 18767224*s1z**2 - 54663952*s1z*s2z + 18767224*s2z**2))/1.376256e8 + \
        (eta*(632550449425 - 22912243200*np.pi**2 - 1512*(-23281001 + 6352738*np.sqrt(1 - 4*eta))*s1z**2 - 28527282000*s1z*s2z + \
        35200873512*s2z**2 + 9605339856*np.sqrt(1 - 4*eta)*s2z**2 + 34172264448*np.pi*(s1z + s2z)))/1.040449536e11 + \
        (107*np.log(2))/280. + (107*np.log(theta))/280.
        g_0 = (-12029*eta**3*(s1z + s2z))/92160. + (eta**2* \
        (1701228*np.pi - 838782*s1z**3 + 507654*s1z**2*s2z + s2z*(-840149 + 870576*np.sqrt(1 - 4*eta) - 838782*s2z**2) +  \
        s1z*(-840149 - 870576*np.sqrt(1 - 4*eta) + 507654*s2z**2)))/1.548288e7 +  \
        (-6579635551*(-1 + np.sqrt(1 - 4*eta))*s1z + 535759434*(-1 + np.sqrt(1 - 4*eta))*s1z**3 -  \
        (1 + np.sqrt(1 - 4*eta))*s2z*(-6579635551 + 535759434*s2z**2) +  \
        np.pi*(-565550067 - 465230304*(-1 + np.sqrt(1 - 4*eta))*s1z**2 + 465230304*(1 + np.sqrt(1 - 4*eta))*s2z**2))/1.30056192e9 \
        + (eta*(-1134*(-206917 + 71931*np.sqrt(1 - 4*eta))*s1z**3 + 218532006*(-1 + np.sqrt(1 - 4*eta))*s1z**2*s2z -  \
        144*np.pi*(488825 + 923076*s1z**2 - 1782648*s1z*s2z + 923076*s2z**2) -  \
        s1z*(1496368361 - 429508815*np.sqrt(1 - 4*eta) + 218532006*(1 + np.sqrt(1 - 4*eta))*s2z**2) +  \
        s2z*(-1496368361 - 429508815*np.sqrt(1 - 4*eta) + 1134*(206917 + 71931*np.sqrt(1 - 4*eta))*s2z**2)))/1.8579456e8

        ansatz = (a*theta**3/8.)*(1 + b_0*theta**2. + c_0*theta**3. + d_0*theta**4. + e_0*theta**5. + f_0*theta**6.)

        return ansatz
    return ansatz1

#second ansatz to fit to
def make_ansatz2(eta, s1z, s2z, MAXtime, Omega_0):
    def ansatz2(t, e, a, t_0, omega_1, t_1, ke, k_omega):
        ansatz2_term = e*(1.+.0001*ke*t)*np.cos(t*(omega_1*(1.+.0001*k_omega*t))*Omega_0+t_1)
        return make_ansatz1(eta, s1z, s2z, MAXtime)(t,a,t_0) + ansatz2_term
    return ansatz2

#intermediate fit that fits only eccentricity (e) and phase offset (t_1)
def make_ansatz2a(eta, s1z, s2z, MAXTime, Omega_0, a, t_0, omega_1, ke, k_omega):
    ansatz2 = make_ansatz2(eta, s1z, s2z, MAXTime, Omega_0)
    def ansatz2a(t, e, t_1):
        return ansatz2(t, e, a, t_0, omega_1, t_1, ke, k_omega)
    return ansatz2a

def lambda_r1PNResSum(Amp, phi, Pr_0, omega_0, R_0, eta, gamma):
    return 1 + (Amp*eta*np.tan(phi)*np.sqrt(np.cos(phi)**2)/(2.*np.sqrt(R_0)*omega_0*np.abs(Pr_0))) + (Amp*gamma*eta*np.tan(phi)*np.sqrt(np.cos(phi)**2)/(2.*(R_0**1.5)*omega_0*np.abs(Pr_0)))

def lambda_t1PNResSum(Amp, phi, omega_0, R_0, eta, gamma):
    return 1 + (Amp*np.sqrt(np.cos(phi)**2)/(4.*omega_0)) - (Amp*gamma*(1. + 3.*eta)*np.sqrt(np.cos(phi)**2)/(8.*R_0*omega_0))

def Pr35PN(r, q, S1, S2, gamma):
    omega_1 = m_omega_r35SPN(r,q,S1,S2,gamma)
    drdteGW = drdtEGW35PNBAM(r,omega_1,q,S1,S2,gamma)
    return Pr35PNdrdtBAM(r,drdteGW,q,S1,S2,gamma)

#Set of functions to calculate P_r with gamma at 3.5PN
def drdtEGW35PNBAM(r, omega, q, S1, S2, gamma):
    chi1x,chi1y,chi1z = S1
    chi2x,chi2y,chi2z = S2
    return ((-6.4*q**2*omega**3.3333333333333335)/(1 + q)**4 + (q**2*(23.752380952380953 + (18.666666666666668*q)/(1 + q)**2)*omega**4)/(1 + q)**4 + \
        (q*(8.*q**3*chi1z + 8.*chi2z + q**2*(-80.42477193189869 + 25.599999999999998*chi1z + 17.6*chi2z) + q*(-80.42477193189869 + 17.6*chi1z + 25.599999999999998*chi2z))*omega**4.333333333333333)/(1. + q)**5 + \
        ((1 + q)**4*((-6.6000000000000005*q**4*chi1z**2)/(1 + q)**5 + (6.6*q**4*(-1. + q**2)*chi1z**2)/(1. + q)**7 - (24.8*q**3*chi1z*chi2z)/(1. + q)**6 + (6.6000000000000005*chi2z**2)/(1. + q)**5 + \
             ((q**4*(31.542151675485012 + 8.44162257495591*q - 69.31216931216932*q**2 + 8.44162257495591*q**3 + 31.542151675485012*q**4))/(1. + q)**8 - (6.6000000000000005*q*chi2z**2)/(1 + q) + \
                (-6.6 + (13.2*q)/(1 + q)**2)*chi2z**2)/(1 + q)**4)*omega**4.666666666666667)/q**2 + \
        (q**2*(245.07414691003814 + (488.4129378780936*q)/(1 + q)**2 + ((25.2 - 20.22222222222222*q - 150.84444444444446*q**2 - 135.02222222222224*q**3 - 24.400000000000002*q**4 + 5.2*q**5)*chi1z)/\
              (1. + q)**4 + 4.8*(1 + q)**3*chi1z**3 + ((5.2 - 24.400000000000002*q - 135.02222222222224*q**2 - 150.84444444444446*q**3 - 20.22222222222222*q**4 + 25.2*q**5)*chi2z)/(q*(1. + q)**4) + \
             (4.8*(1 + q)**3*chi2z**3)/q**3)*omega**5)/(1 + q)**4 + ((-9.333333333333334*q**12*chi1z**3 + 1.5987211554602254e-14*q**13*chi1z**3 + 3.552713678800501e-15*q**14*chi1z**3 + \
             q**11*chi1z**2*(-37.06666666666666*chi1z - 0.8*chi2z) + q**3*(-0.8*chi1z - 37.06666666666666*chi2z)*chi2z**2 - 7.105427357601002e-15*chi2z**3 - 9.333333333333334*q**2*chi2z**3 + \
             q**4*chi2z*(-181.61904761904765 + 25.333333333333336*chi1z**2 + 20.533333333333335*chi1z*chi2z - 26.400000000000002*chi2z**2) + \
             q**10*chi1z*(-181.61904761904765 - 26.400000000000002*chi1z**2 + 20.533333333333335*chi1z*chi2z + 25.333333333333336*chi2z**2) + \
             q**5*(649.6614141423464 + 18.933333333333334*chi1z**3 - 1087.1179306290417*chi2z + 151.2*chi1z**2*chi2z + 97.33333333333333*chi2z**3 + chi1z*(-266.724279835391 + 140.*chi2z**2)) + \
             q**9*(649.6614141423464 + 97.33333333333333*chi1z**3 - 266.724279835391*chi2z + 140.*chi1z**2*chi2z + 18.933333333333334*chi2z**3 + chi1z*(-1087.1179306290417 + 151.2*chi2z**2)) + \
             q**6*(99.97412177257047 + 104.26666666666667*chi1z**3 - 2192.683362727807*chi2z + 375.2*chi1z**2*chi2z + 238.66666666666666*chi2z**3 + chi1z*(-1363.5976484420928 + 364.*chi2z**2)) + \
             q**8*(99.97412177257047 + 238.66666666666666*chi1z**3 - 1363.5976484420928*chi2z + 364.*chi1z**2*chi2z + 104.26666666666667*chi2z**3 + chi1z*(-2192.683362727807 + 375.2*chi2z**2)) + \
             q**7*(-2385.166955775451 + 228.*chi1z**3 - 2251.67266313933*chi2z + 494.66666666666663*chi1z**2*chi2z + 228.*chi2z**3 + chi1z*(-2251.67266313933 + 494.66666666666663*chi2z**2)))*omega**5.666666666666667)/\
         (q**3*(1. + q)**8) + (q*((-1.1896953357731348e-14 + 515.5802343491359*q - 812.3460470482407*q**2 - 1686.0578705966016*q**3 - 143.81513036433284*q**4 + 214.31645883489213*q**5)*chi1z + \
             (214.31645883489213 - 143.81513036433284*q - 1686.0578705966016*q**2 - 812.3460470482407*q**3 + 515.5802343491359*q**4 - 1.1896953357731348e-14*q**5)*chi2z)*omega**6)/(1. + q)**7 + \
        ((1 + q)**4*omega**5.333333333333333*((103.88199707870251*q**5*chi1z)/(1 + q)**8 + (q**4*(-3.8793650793650793 + 64.15238095238095*q - 3.8793650793650793*q**2)*chi1z**2)/(1. + q)**7 + \
             (q**4*(-3.8793650793650793 + 64.15238095238095*q + 59.644444444444446*q**2 - 4.507936507936508*q**3 + 3.8793650793650793*q**4)*chi1z**2)/(1. + q)**9 + \
             (q**3*(53.371428571428574 + 213.5873015873016*q + 53.371428571428574*q**2)*chi1z*chi2z)/(1. + q)**8 + \
             (chi2z*((103.88199707870251*q**3)/(1 + q)**3 + 3.8793650793650793*chi2z - (71.91111111111111*q*chi2z)/(1 + q)**2))/(1 + q)**5 + \
             ((q*(-3.8793650793650793 + 64.15238095238095*q - 3.8793650793650793*q**2)*chi2z**2)/(1. + q)**3 + \
                (-3.8793650793650793 - (84.17777777777778*q**2)/(1 + q)**4 + (79.66984126984127*q)/(1 + q)**2)*chi2z**2 + \
                (q**4*(-740.682986723913 + (15.308641975308642*q**3)/(1 + q)**6 + (199.794708994709*q**2)/(1 + q)**4 + (56.78114203124651*q)/(1 + q)**2 + 217.81709064889242*chi1z + 217.81709064889242*chi2z))/\
                 (1 + q)**4)/(1 + q)**4 + (34.78349206349206*q**4*np.log(omega))/(1 + q)**8))/q**2)/\
      (-(gamma*q*(7 + 13*q + 7*q**2))/(4.*(1 + q)**4*r**3) + q/(2.*(1 + q)**2*r**2) + (gamma**1.5*((5*q*(4 + 3*q)*chi1z)/(8.*(1 + q)**4) + (5*q**2*(3 + 4*q)*chi2z)/(8.*(1 + q)**4)))/r**3.5 + \
        (gamma**2.5*((7*q*(32 + 42*q + 14*q**2 + q**3)*chi1z)/(32.*(1 + q)**6) + (7*q**2*(1 + 14*q + 42*q**2 + 32*q**3)*chi2z)/(32.*(1 + q)**6)))/r**4.5 + \
        (gamma**2*((-3*q*(9 + 16*q + 13*q**2 + 16*q**3 + 9*q**4))/(16.*(1 + q)**6) + (3*q*chi1x**2)/(2.*(1 + q)**4) - (3*q*chi1y**2)/(4.*(1 + q)**4) - (3*q*chi1z**2)/(4.*(1 + q)**4) + \
             (3*q**2*chi1x*chi2x)/(1 + q)**4 + (3*q**3*chi2x**2)/(2.*(1 + q)**4) - (3*q**2*chi1y*chi2y)/(2.*(1 + q)**4) - (3*q**3*chi2y**2)/(4.*(1 + q)**4) - (3*q**2*chi1z*chi2z)/(2.*(1 + q)**4) - \
             (3*q**3*chi2z**2)/(4.*(1 + q)**4)))/r**4 + (gamma**3*(-(q*(537 + (-3497 + 243*np.pi**2)*q + (-18707 + 972*np.pi**2)*q**2 + 3*(-9787 + 486*np.pi**2)*q**3 + (-18707 + 972*np.pi**2)*q**4 + \
                   (-3497 + 243*np.pi**2)*q**5 + 537*q**6))/(96.*(1 + q)**8) + (q*(52 + 12*q - 25*q**2)*chi1x**2)/(4.*(1 + q)**6) + (q*(-1 + 17*q + 15*q**2)*chi1y**2)/(2.*(1 + q)**6) - \
             (q*(50 + 38*q + 3*q**2)*chi1z**2)/(4.*(1 + q)**6) - (9*q**3*chi1x*chi2x)/(2.*(1 + q)**6) + (q**3*(-25 + 12*q + 52*q**2)*chi2x**2)/(4.*(1 + q)**6) + (3*q**2*(4 + 9*q + 4*q**2)*chi1y*chi2y)/(1 + q)**6 - \
             (q**3*(-15 - 17*q + q**2)*chi2y**2)/(2.*(1 + q)**6) - (3*q**2*(10 + 21*q + 10*q**2)*chi1z*chi2z)/(2.*(1 + q)**6) - (q**3*(3 + 38*q + 50*q**2)*chi2z**2)/(4.*(1 + q)**6)))/r**5 + \
        (gamma**3.5*((27*q*(12 + 5*q)*chi1z**3)/(32.*(1 + q)**6) + (9*q**2*(128 + 181*q - 88*q**2 + 81*q**3 + 544*q**4 + 312*q**5)*chi2z)/(128.*(1 + q)**8) + \
             (27*q**2*(23 + 22*q)*chi1z**2*chi2z)/(32.*(1 + q)**6) - (27*q**4*(7 + 20*q)*chi2x**2*chi2z)/(16.*(1 + q)**6) + (27*q**4*(5 + 12*q)*chi2y**2*chi2z)/(32.*(1 + q)**6) + \
             (27*q**4*(5 + 12*q)*chi2z**3)/(32.*(1 + q)**6) + chi1x**2*((-27*q*(20 + 7*q)*chi1z)/(16.*(1 + q)**6) - (27*q**2*(15 + 22*q)*chi2z)/(16.*(1 + q)**6)) + \
             chi1y**2*((27*q*(12 + 5*q)*chi1z)/(32.*(1 + q)**6) + (27*q**2*(15 + 28*q)*chi2z)/(32.*(1 + q)**6)) + \
             chi1x*((-27*q**2*(5 + 3*q)*chi1z*chi2x)/(4.*(1 + q)**6) - (27*q**3*(3 + 5*q)*chi2x*chi2z)/(4.*(1 + q)**6)) + \
             chi1y*((27*(4 - 3*q)*q**2*chi1z*chi2y)/(16.*(1 + q)**6) + (27*q**3*(-3 + 4*q)*chi2y*chi2z)/(16.*(1 + q)**6)) + \
             chi1z*((9*q*(312 + 544*q + 81*q**2 - 88*q**3 + 181*q**4 + 128*q**5))/(128.*(1 + q)**8) - (27*q**3*(22 + 15*q)*chi2x**2)/(16.*(1 + q)**6) + (27*q**3*(28 + 15*q)*chi2y**2)/(32.*(1 + q)**6) + \
                (27*q**3*(22 + 23*q)*chi2z**2)/(32.*(1 + q)**6))))/r**5.5)

def Pr35PNdrdtBAM(r, drdt, q, S1, S2, gamma):
    chi1x,chi1y,chi1z = S1
    chi2x,chi2y,chi2z = S2
    return (-drdt + (gamma**3*(chi1y*(-(q*(6 + q)*chi1x)/(4.*(1 + q)**4) - (q*(6 + 13*q)*chi2x)/(4.*(1 + q)**4)) - (q**2*(13 + 6*q)*chi1x*chi2y)/(4.*(1 + q)**4) - (q**2*(1 + 6*q)*chi2x*chi2y)/(4.*(1 + q)**4)))/r**3.5 + 
        (gamma**3.5*(chi1z*((3*q*(2 + 5*q)*chi1x*chi2y)/(2.*(1 + q)**4) - (3*q**2*(5 + 2*q)*chi2x*chi2y)/(2.*(1 + q)**4)) + chi1y*((-3*q*(2 + 5*q)*chi1x)/(2.*(1 + q)**4) + (3*q**2*(5 + 2*q)*chi2x)/(2.*(1 + q)**4))*chi2z))/
         r**4)/(-((1 + q)**2/q) - (gamma**2*(47 + 229*q + 363*q**2 + 229*q**3 + 47*q**4))/(8.*q*(1 + q)**2*r**2) - (gamma*(-7 - 15*q - 7*q**2))/(2.*q*r) - 
        (gamma**2.5*(((12 + 11*q + 4*q**2)*chi1z)/(4.*q*(1 + q)) + ((4 + 11*q + 12*q**2)*chi2z)/(4.*(1 + q))))/r**2.5 - 
        (gamma**3.5*(((-144 - 842*q - 1486*q**2 - 1097*q**3 - 357*q**4 - 53*q**5)*chi1z)/(16.*q*(1 + q)**4) + ((-53 - 357*q - 1097*q**2 - 1486*q**3 - 842*q**4 - 144*q**5)*chi2z)/(16.*(1 + q)**4)))/r**3.5 - 
        (gamma**3*(-np.pi**2/16. + (-363 - 2608*q - 7324*q**2 - 10161*q**3 - 7324*q**4 - 2608*q**5 - 363*q**6)/(48.*q*(1 + q)**4) + ((9 + 9*q + q**2)*chi1x**2)/(2.*q*(1 + q)**2) - (9*chi1y**2)/(4.*q*(1 + q)) - 
             (9*chi1z**2)/(4.*q*(1 + q)) + ((3 + 5*q + 3*q**2)*chi1x*chi2x)/(1 + q)**2 + ((q + 9*q**2 + 9*q**3)*chi2x**2)/(2.*(1 + q)**2) + ((3 + 8*q + 3*q**2)*chi1y*chi2y)/(2.*(1 + q)**2) - 
             (9*q**2*chi2y**2)/(4.*(1 + q)) + ((3 + 8*q + 3*q**2)*chi1z*chi2z)/(2.*(1 + q)**2) - (9*q**2*chi2z**2)/(4.*(1 + q))))/r**3)

def delta_rmas(Amp, R_0, omega_0, q, gamma):
    return (Amp*R_0/(2.*omega_0)) - (3.*Amp*gamma*(3 + 7*q + 3*(q**2))/(4.*omega_0*(1.+q)**2.))